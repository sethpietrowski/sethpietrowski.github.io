{"version":3,"file":"FEA-CFGM2S-c.js","sources":["../../src/pages/FEA/geometry.js","../../src/pages/FEA/physics.js","../../src/pages/FEA/rendering.js","../../src/pages/FEA/ui.js","../../src/pages/FEA/core.js","../../src/pages/FEA.jsx"],"sourcesContent":["//geometry and flow domain creation\r\n\r\n//import { simulation } from './core.js';\r\n\r\n// BÃ©zier interpolation helper\r\nfunction bezierQuadratic(t, p0, p1, p2) {\r\n    return (1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2;\r\n}\r\n\r\n//geometry functions\r\n\r\n/**\r\n * \r\n * @param {number} x - Horizontal coordinate\r\n * @param {boolean} top - Whether to return the top or bottom of the wall\r\n * @param {object} controlPoints - Nozzle geometry control points\r\n * @param {number} scaleY - Vertical Scaling factor\r\n * @param {number} canvasHeight - Canvas height in pixels\r\n * @returns {number} Y coordinate of the wall\r\n */\r\n\r\nexport function getWallY(x, top, controlPoints, scaleY, canvasHeight) {\r\n    \r\n    //clamp x to valid range\r\n    x = Math.max(0, Math.min(x, controlPoints.exit_x));\r\n\r\n    const t = x / controlPoints.exit_x;\r\n    const cp = controlPoints;\r\n\r\n    const y = bezierQuadratic(\r\n        t,\r\n        bezierQuadratic(t, cp.inlet_radius, cp.cp1y, cp.throat_radius),\r\n        bezierQuadratic(t, cp.throat_radius, cp.cp2y, cp.switcher_y),\r\n        bezierQuadratic(t, cp.switcher_y, cp.cp3y, cp.exit_radius)\r\n    );\r\n\r\n    const scaledY = y * scaleY;\r\n\r\n    return top \r\n        ? canvasHeight / 2 - scaledY \r\n        : canvasHeight / 2 + scaledY;\r\n}\r\n\r\n/**\r\n * Calculate wall angles to allow for flow expansion tracking (for each column)\r\n * \r\n * @param {number} cols - Number of columns\r\n * @param {number} cellWidth - Width of each grid cell\r\n * @param {object} controlPoints - Nozzle control points\r\n * @param {number} scaleY - Vertical scaling factor\r\n * @param {number} canvasHeight - Canvas height in pixels\r\n * @returns {object} Arrays of top and bottom wall angles\r\n */\r\n\r\nexport function calculateWallAngles(cols, cellWidth, controlPoints, scaleY, canvasHeight) {\r\n    const wallAngleTop = Array(cols).fill(0);\r\n    const wallAngleBottom = Array(cols).fill(0);\r\n\r\n    for (let col = 0; col < cols; col++) {\r\n        const x = col * cellWidth + cellWidth / 2;\r\n        const dx = cellWidth;\r\n\r\n        if (col < cols - 1) {\r\n            const y1_top = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n            const y1_bot = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n            const y2_top = getWallY(x + dx, true, controlPoints, scaleY, canvasHeight);\r\n            const y2_bot = getWallY(x + dx, false, controlPoints, scaleY, canvasHeight);\r\n\r\n            wallAngleTop[col] = Math.atan2(y2_top - y1_top, dx);\r\n            wallAngleBottom[col] = Math.atan2(y2_bot - y1_bot, dx);\r\n        } else {\r\n            wallAngleTop[col] = wallAngleTop[col - 1] || 0;\r\n            wallAngleBottom[col] = wallAngleBottom[col - 1] || 0;\r\n        }\r\n    }\r\n\r\n    return { top: wallAngleTop, bottom: wallAngleBottom };\r\n}\r\n\r\n/**\r\n * Get local nozzle radius at a given x.\r\n * \r\n * @param {number} x - Horizontal coordinate\r\n * @param {object} controlPoints - Nozzle geometry control points\r\n * @param {number} scaleY - Vertical scaling factor\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {number} Local radius\r\n */\r\n\r\nexport function getLocalRadius(x, controlPoints, scaleY, canvasHeight) {\r\n    if (x <= 0) return controlPoints.inlet_radius * scaleY;\r\n    if (x >= controlPoints.exit_x) return controlPoints.exit_radius * scaleY;\r\n\r\n    const topY = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n    const bottomY = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n    return Math.abs(bottomY - topY) / 2;\r\n}\r\n\r\n//flow domain\r\n\r\n// Create nozzle domain (hourglass shape TO BE EDITED TO COINCIDE WITH NOZZLE GEOMETRY)\r\nexport function createFlowDomain(simulationData) {\r\n    const { rows, cols, cellWidth, cellHeight, controlPoints, scaleY, canvasHeight } = simulationData;\r\n    \r\n    console.log('Creating flow domain with dimensions:', cols, 'x', rows);\r\n\r\n    simulationData.isInside = Array.from({ length: rows }, () => Array(cols).fill(false));\r\n    simulationData.isBoundary = Array.from({ length: rows }, () => Array(cols).fill(false));\r\n\r\n    const wallAngles = calculateWallAngles(cols, cellWidth, controlPoints, scaleY, canvasHeight);\r\n    simulationData.wallAngleTop = wallAngles.top;\r\n    simulationData.wallAngleBottom = wallAngles.bottom;\r\n\r\n    //determine if each cell is inside nozzle\r\n    for (let row = 0; row < rows; row++) {    \r\n        for (let col = 0; col < cols; col++) {\r\n            const xCanvas = col * cellWidth + cellWidth / 2;\r\n            const yCanvas = row * cellHeight + cellHeight / 2;\r\n\r\n            if (xCanvas <= controlPoints.exit_x) {\r\n                const topY = getWallY(xCanvas, true, controlPoints, scaleY, canvasHeight);\r\n                const bottomY = getWallY(xCanvas, false, controlPoints, scaleY, canvasHeight);\r\n\r\n                if (yCanvas >= topY && yCanvas <= bottomY) {\r\n                    simulationData.isInside[row][col] = true;\r\n\r\n                    //use boundary layers from wall\r\n                    const distToTopWall = Math.abs(yCanvas - topY);\r\n                    const distToBottomWall = Math.abs(yCanvas - bottomY);\r\n                    const minDistToWall = Math.min(distToTopWall, distToBottomWall);\r\n                    \r\n                    //Boundary zone of 1.5 cells from wall\r\n                    const boundaryThickness = Math.max(cellWidth, cellHeight) * 1.5;\r\n                    if (minDistToWall < boundaryThickness) {\r\n                        simulationData.isBoundary[row][col] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //count interior cells for debugging\r\n    let interiorCount = 0;\r\n    let boundaryCount = 0;\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (simulationData.isInside[row][col]) {\r\n                if (simulationData.isBoundary[row][col]) {\r\n                    boundaryCount++;\r\n                } else {\r\n                    interiorCount++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(`Domain created: ${interiorCount} interior cells, ${boundaryCount} boundary cells`);\r\n}\r\n\r\n//geometry utilities\r\n\r\n/**\r\n * Check if a point is inside the nozzle geometry\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {object} controlPoints - Control points\r\n * @param {number} scaleY - Y scaling\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {boolean} True if inside nozzle\r\n */\r\nexport function isPointInsideNozzle(x, y, controlPoints, scaleY, canvasHeight) {\r\n    if (x < 0 || x > controlPoints.exit_x) return false;\r\n\r\n    const topY = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n    const bottomY = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n\r\n    return y >= topY && y <= bottomY;\r\n}\r\n\r\n/**\r\n * Get the centerline Y coordinate (always canvas height / 2)\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {number} Centerline Y coordinate\r\n */\r\nexport function getCenterlineY(canvasHeight) {\r\n    return canvasHeight / 2;\r\n}","// physics.js - physics calculations and convergence\r\n\r\n// import { velocityX, velocityY, pressure, density, temperature,\r\n//         rows, cols, cellWidth, cellHeight, isInside, isBoundary,\r\n//         totalIterations, controlPoints, scaleY, wallAngleTop,\r\n//         wallAngleBottom } from './state.js';\r\n// import { calculateArtificialViscosity } from './stability.js';\r\n\r\n// import { calculateResiduals, checkConvergence, storePreviousIteration, \r\n//         updateConvergenceHistory } from './convergence.js';\r\n\r\n// import { updateSimulationStatus, updateConvergenceDisplay } from './loop.js';\r\n\r\nimport { simulation, convergenceHistory, convergenceTolerances } from './core.js';\r\nimport { getLocalRadius, getWallY } from './geometry.js';\r\n\r\n//flow initialization\r\nexport function initializeFlow(simulationData) {\r\n    const { rows, cols, isInside, isBoundary } = simulationData;\r\n\r\n    //inlet conditions (set values for now)\r\n    const P_inlet = 300000; //kpa\r\n    const V_inlet = 100;    // m/s\r\n    const T_inlet = 300;    // K\r\n    const rho_inlet = 3.5;  // kg/m^3\r\n\r\n    console.log('Initializing flow field...');\r\n\r\n    //initialize interior cells with basic flow profile\r\n    for (let row = 0; row < rows; row++) {\r\n        for(let col = 0; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                //linear interpolation from inlet to exit\r\n                const progress = col / (cols - 1);\r\n                simulationData.velocityX[row][col] = V_inlet * (1 + progress * 0.5);\r\n                simulationData.velocityY[row][col] = 0.0;\r\n                simulationData.pressure[row][col] = P_inlet * (1 - progress * 0.3);\r\n                simulationData.density[row][col] = rho_inlet * (1 - progress * 0.2);\r\n                simulationData.temperature[row][col] = T_inlet * (1 - progress * 0.1);\r\n            } else if (isBoundary[row][col]) {\r\n                //wall boundary conditions\r\n                simulationData.velocityX[row][col] =0.0;\r\n                simulationData.velocityY[row][col] = 0.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log('Flow field initialized.');\r\n}\r\n\r\n//previous iteration storage\r\n\r\nlet prevVelocityX = [];\r\nlet prevVelocityY = [];\r\nlet prevPressure = [];\r\n\r\nfunction initializePreviousArrays(rows, cols) {\r\n    if (prevVelocityX.length ===0) {\r\n        prevVelocityX = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n        prevVelocityY = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n        prevPressure = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n    }\r\n}\r\n\r\nfunction storePreviousIteration(simulationData) {\r\n    const { rows, cols, velocityX, velocityY, pressure } = simulationData;\r\n\r\n    initializePreviousArrays(rows, cols);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            prevVelocityX[row][col] = velocityX[row][col];\r\n            prevVelocityY[row][col] = velocityY[row][col];\r\n            prevPressure[row][col] = pressure[row][col];\r\n        }\r\n    }\r\n}\r\n\r\nexport function calculateArtificialViscosity(row, col, mach, rho, simulationData) {\r\n    const { velocityX, velocityY, cellWidth, cellHeight, rows, cols } = simulationData;\r\n    \r\n    const C2 = 0.1; // artificial viscocity coefficient\r\n\r\n    let viscosityX = 0, viscosityY = 0;\r\n\r\n    if (mach > 0.3) { //artificial viscosity  added in transsonic+ region\r\n        if (col > 0 && col < cols - 1) {\r\n            const divergenceX = velocityX[row][col + 1] - velocityX[row][col - 1];\r\n            viscosityX = -C2 * rho * Math.abs(divergenceX) * divergenceX / (2 * cellWidth);\r\n        }\r\n\r\n        if (row > 0 && row < rows - 1) {\r\n            const divergenceY = velocityY[row + 1][col] - velocityY[row - 1][col];\r\n            viscosityY = -C2 * rho * Math.abs(divergenceY) * divergenceY / (2 * cellWidth);\r\n        }\r\n    }\r\n\r\n    return { x: viscosityX, y: viscosityY };\r\n}\r\n\r\n// should reintegrate von neumann-richtmyer artif viscos & cent diff if more acc\r\n//\r\n//     //velocity gradients (central difference)\r\n//     const dvxDx = (velocityX[row][col + 1] - velocityX[row][col - 1]) / (2 * cellWidth);\r\n//     const dvxDy = (velocityX[row + 1][col] - velocityX[row - 1][col]) / (2 * cellHeight);\r\n//     const dvyDx = (velocityY[row][col + 1] - velocityY[row][col - 1]) / (2 * cellWidth);\r\n//     const dvyDy = (velocityY[row + 1][col] - velocityY[row - 1][col]) / (2 * cellHeight);\r\n\r\n//     //Von Neumann-Richtmyer artificial viscosity\r\n//     const C1 = 0.1, C2 = 0.2;\r\n//     const divergence = dvxDx + dvyDy;\r\n\r\n//     if (divergence < 0) { //compression\r\n//         const viscosity = -(C1 * Math.abs(divergence) + C2 * divergence * divergence) * \r\n//                          rho * Math.min(cellWidth, cellHeight);\r\n//         return { \r\n//             x: viscosity * dvxDx, \r\n//             y: viscosity * dvyDy \r\n//         };\r\n//     }\r\n//     return { x: 0, y: 0 };\r\n// }\r\n\r\n\r\nfunction calculateResiduals(simulationData) {\r\n    const { rows, cols, isInside, isBoundary, velocityX, velocityY, pressure, density, cellWidth, cellHeight } = simulationData;\r\n\r\n    let velResidual = 0, pressResidual = 0, massResidual = 0;\r\n    let count = 0;\r\n\r\n    for (let row = 1; row < rows - 1; row++) {\r\n        for (let col = 1; col < cols - 1; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                // velocity residual - L2 norm\r\n                const dvx = velocityX[row][col] - prevVelocityX[row][col];\r\n                const dvy = velocityY[row][col] - prevVelocityY[row][col];\r\n                velResidual += (dvx * dvx + dvy * dvy);\r\n\r\n                //Pressure residual\r\n                const dp = pressure[row][col] - prevPressure[row][col];\r\n                pressResidual += dp * dp;\r\n\r\n                //Mass conversation residual - continuity equation\r\n                const rho = density[row][col];\r\n                const rho_left = density[row][col - 1] || rho;\r\n                const rho_right = density[row][col + 1] || rho;\r\n                const rho_up = density[row - 1][col] || rho;\r\n                const rho_down = density[row + 1][col] || rho;\r\n\r\n                const vx_left = velocityX[row][col - 1] || velocityX[row][col];\r\n                const vx_right = velocityX[row][col + 1] || velocityX[row][col];\r\n                const vy_up = velocityY[row - 1][col] || velocityX[row][col];\r\n                const vy_down = velocityY[row + 1][col] || velocityX[row][col];\r\n\r\n                //continuity - d(rho*u)/dx + d(rho*v)/dy = 0\r\n                const drhoDx = (rho_right * vx_right - rho_left * vx_left) / (2 * cellWidth);\r\n                const drhoDy = (rho_down * vy_down - rho_up * vy_up) / (2 * cellHeight);\r\n                const massRes = Math.abs(drhoDx + drhoDy);\r\n                massResidual += massRes * massRes;\r\n\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        velocity: Math.sqrt(velResidual / Math.max(count, 1)),\r\n        pressure: Math.sqrt(pressResidual / Math.max(count, 1)),\r\n        mass: Math.sqrt(massResidual / Math.max(count, 1))\r\n    };\r\n}\r\n\r\n//convergence checking \r\n\r\nfunction updateConvergenceHistory(residuals) {\r\n    const history = convergenceHistory;\r\n\r\n    history.velocity.push(residuals.velocity);\r\n    history.pressure.push(residuals.pressure);\r\n    history.mass.push(residuals.mass);\r\n\r\n    //limit history size\r\n    if (history.velocity.length > history.maxHistory) {\r\n        history.velocity.shift();\r\n        history.pressure.shift();\r\n        history.mass.shift();\r\n    }\r\n}\r\n\r\nfunction checkConvergence(residuals) {\r\n    const velConverged = residuals.velocity < convergenceTolerances.velocity;\r\n    const pressConverged = residuals.pressure < convergenceTolerances.pressure;\r\n    const massConverged = residuals.mass < convergenceTolerances.mass;\r\n    return velConverged && pressConverged && massConverged;\r\n}\r\n\r\n//main Physics update function\r\n\r\n/**\r\n * Update flow field\r\n * @param {object} simulationData - Main simulation data object\r\n * @returns {boolean} True to continue iteration, false if converged\r\n */\r\n\r\nexport function updateFlowStabilized(simulationData) {\r\n    if (simulation.state !== 'running' || !simulationData) {\r\n        return false;\r\n    }\r\n\r\n    // Store previous iteration values\r\n    storePreviousIteration(simulationData);\r\n\r\n    const gamma = 1.4; //air\r\n    const R = 287; //air (J/kg*K)\r\n    const P_inlet = 300000; //Pa\r\n    const V_inlet = 100; //m/s\r\n    const T_inlet = 300; //K\r\n    const rho_inlet = 3.5 // kg/m3\r\n    const relaxationVel = 0.15;\r\n    const relaxationThermo = 0.05;\r\n\r\n    //simple flow update to be replaced\r\n    const { rows, cols, cellWidth, cellHeight, isInside, isBoundary,\r\n            velocityX, velocityY, pressure, density, temperature,\r\n            controlPoints, scaleY, canvasHeight, wallAngleTop, wallAngleBottom } = simulationData;\r\n\r\n    //adaptive time stepping with CFL condition\r\n    let maxVel = 0;\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (isInside[row][col]) {\r\n                const vel = Math.sqrt(velocityX[row][col]**2 + velocityY[row][col]**2);\r\n                maxVel = Math.max(maxVel, vel);\r\n            }\r\n        }\r\n    }\r\n\r\n    const cfl = 0.5;\r\n    const dt = Math.min(0.0001, cfl * Math.min(cellWidth, cellHeight) / Math.max(maxVel, 1.0));\r\n\r\n    //temporary arrays for updates\r\n    const newVx  = velocityX.map(row => [...row]);\r\n    const newVy  = velocityY.map(row => [...row]);\r\n    const newP   = pressure.map(row => [...row]);\r\n    const newRho = density.map(row => [...row]);\r\n    const newT = temperature.map(row => [...row]);\r\n\r\n\r\n    //Apply inlet boundary conditions\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < 4; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                newVx[row][col] = V_inlet;\r\n                newVy[row][col] = 0.0;\r\n                newP[row][col] = P_inlet;\r\n                newRho[row][col] = rho_inlet;\r\n                newT[row][col] = T_inlet;\r\n            }\r\n        }\r\n    }\r\n    \r\n    //update interior points, using central diff for sub, upwind for supersonic\r\n    for (let row = 2; row < rows - 2; row++) {\r\n        for (let col = 3; col < cols - 3; col++) {\r\n            if (!isInside[row][col] || isBoundary[row][col]) continue;\r\n\r\n            const xCanvas = col * cellWidth + cellWidth / 2;\r\n            const yCanvas = row * cellHeight + cellHeight / 2;\r\n\r\n            //current properties\r\n            const rho = density[row][col];\r\n            const vx = velocityX[row][col];\r\n            const vy = velocityY[row][col];\r\n            const p = pressure[row][col];\r\n\r\n            //local speed of sound\r\n            const c = Math.sqrt(gamma * p / rho);\r\n            const mach = Math.sqrt(vx * vx + vy * vy) / c;\r\n            \r\n            //derivatives\r\n            let dpDx, dpDy, dvxDx, dvxDy, dvyDx, dvyDy;\r\n\r\n            //subsonic flow\r\n            if (mach < 0.8) {\r\n                //central difference\r\n                dpDx = (pressure[row][col + 1] - pressure[row][col - 1]) / (2 * cellWidth);\r\n                dpDy = (pressure[row + 1][col] - pressure[row - 1][col]) / (2 * cellHeight);\r\n                dvxDx = (velocityX[row][col + 1] - velocityX[row][col - 1]) / (2 * cellWidth);\r\n                dvxDy = (velocityX[row + 1][col] - velocityX[row - 1][col]) / (2 * cellHeight);\r\n                dvyDx = (velocityY[row][col + 1] - velocityY[row][col - 1]) / (2 * cellWidth);\r\n                dvyDy = (velocityY[row + 1][col] - velocityY[row - 1][col]) / (2 * cellHeight);\r\n            } else {\r\n                //supersonic flow - upwind scheme\r\n                if (vx > 0) {\r\n                    dpDx = (pressure[row][col] - pressure[row][col - 1]) / cellWidth;\r\n                    dvxDx = (velocityX[row][col] - velocityX[row][col - 1]) / cellWidth;\r\n                    dvyDx = (velocityY[row][col] - velocityY[row][col - 1]) / cellWidth;\r\n                } else {\r\n                    dpDx = (pressure[row][col + 1] - pressure[row][col]) / cellWidth;\r\n                    dvxDx = (velocityX[row][col + 1] - velocityX[row][col]) / cellWidth;\r\n                    dvyDx = (velocityY[row][col + 1] - velocityY[row][col]) / cellWidth;\r\n                }\r\n\r\n                if (vy > 0) {\r\n                    dpDy = (pressure[row][col] - pressure[row - 1][col]) / cellHeight;\r\n                    dvxDy = (velocityX[row][col] - velocityX[row - 1][col]) / cellHeight;\r\n                    dvyDy = (velocityY[row][col] - velocityY[row - 1][col]) / cellHeight;\r\n                } else {\r\n                    dpDy = (pressure[row + 1][col] - pressure[row][col]) / cellHeight;\r\n                    dvxDy = (velocityX[row + 1][col] - velocityX[row][col]) / cellHeight;\r\n                    dvyDy = (velocityY[row + 1][col] - velocityY[row][col]) / cellHeight;\r\n                }\r\n            }\r\n\r\n            //artificial viscosity for stability\r\n            const artificialViscosity = calculateArtificialViscosity(row, col, mach, rho, simulationData);\r\n    \r\n            //wall influence\r\n            const centerY = canvas.height / 2;\r\n            const localRadius = getLocalRadius(xCanvas, controlPoints, scaleY, canvasHeight);\r\n            const throatRadius = controlPoints.throat_radius * scaleY;\r\n            const wallAngle = yCanvas < centerY ? (wallAngleTop ? wallAngleTop[col] : 0) : (wallAngleBottom ? wallAngleBottom [col] : 0);\r\n\r\n            //expansion effects\r\n            let expansionFactorY = 0;\r\n            if (localRadius > throatRadius * 1.1) {\r\n                const distFromCenter = Math.abs(yCanvas - centerY);\r\n                const radialPosition = distFromCenter / localRadius;\r\n                const wallGradient = Math.sin(wallAngle);\r\n                expansionFactorY = wallGradient * vx * radialPosition * 0.05;\r\n                if (yCanvas > centerY) expansionFactorY = -expansionFactorY;\r\n            }\r\n\r\n            //momentum equations - navier-stokes\r\n            const convectiveX = vx * dvyDx + vy * dvxDy;\r\n            const convectiveY = vx * dvxDx + vy * dvyDy;\r\n            const accelerationX = -dpDx / Math.max(rho, 0.5) - convectiveX * 0.2 + artificialViscosity.x;\r\n            const accelerationY = -dpDy / Math.max(rho, 0.5) - convectiveY * 0.2 + expansionFactorY + artificialViscosity.y;\r\n\r\n\r\n            // Clamp acceleration, necessary for stability\r\n            const maxAccel = 0.5 * c / dt; // scaled by local speed of sound\r\n            const accelX = Math.max(-maxAccel, Math.min(maxAccel, accelerationX));\r\n            const accelY = Math.max(-maxAccel, Math.min(maxAccel, accelerationY));\r\n\r\n            //update velocities\r\n            newVx[row][col] = vx + accelX * dt;\r\n            newVy[row][col] = vy + accelY * dt;\r\n\r\n            //apply vel limits\r\n            const maxVx = 800; //m/s\r\n            const maxVy = 200;\r\n            newVx[row][col] = Math.max(0.01, Math.min(maxVx, newVx[row][col]));\r\n            newVy[row][col] = Math.max(-maxVy, Math.min(maxVy, newVy[row][col]));\r\n            \r\n            //pressure update isentropic equation\r\n            const speedSq = newVx[row][col] ** 2 + newVy[row][col] ** 2;\r\n            const oldSpeedSq = vx ** 2 + vy ** 2;\r\n            const totalEnthalpy = gamma / (gamma - 1) * p / rho + 0.5 * oldSpeedSq;\r\n            \r\n            const newStaticEnthalpy = totalEnthalpy - 0.5 * speedSq;\r\n            newT[row][col] = Math.max(0.1, newStaticEnthalpy * (gamma - 1) / gamma);\r\n            newP[row][col] = Math.max(0.05, rho * R * newT[row][col]);\r\n\r\n            //Isentropic density update\r\n            const pressureRatio = Math.min(5.0, Math.max(0.01, newP[row][col] / P_inlet));\r\n            newRho[row][col] = Math.max(0.5, rho_inlet * Math.pow(pressureRatio, 1 / gamma));\r\n\r\n            //limits\r\n            newT[row][col] = Math.min(500, Math.max(200, newT[row][col]));\r\n            newP[row][col] = Math.min(500000, Math.max(50000, newP[row][col]));\r\n            newRho[row][col] = Math.min(5.0, Math.max(0.5, newRho[row][col]));\r\n        }\r\n    }\r\n            \r\n    //wall boundary conditions with boundary layer effects      \r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (!isBoundary[row][col]) continue;\r\n\r\n            const yCanvas = row * cellHeight + cellHeight / 2;\r\n            const xCanvas = col * cellWidth + cellWidth / 2;\r\n\r\n            //nearest interior ref point\r\n            let refVx = V_inlet, refVy = 0, refP = P_inlet, refRho = rho_inlet, refT = T_inlet;\r\n            let foundRef = false;\r\n                  \r\n            for (let searchRadius = 2; searchRadius <= 6 && !foundRef; searchRadius++) {\r\n                for (let dr = -searchRadius; dr <= searchRadius && !foundRef; dr++) {\r\n                    for (let dc = -searchRadius; dc <= searchRadius && !foundRef; dc++) {\r\n                        const nr = row + dr;\r\n                        const nc = col + dc;\r\n\r\n                        if (\r\n                            nr >= 0 && nr < rows && \r\n                            nc >= 0 && nc < cols && \r\n                            isInside[nr][nc] && \r\n                            !isBoundary[nr][nc]\r\n                        ) { \r\n                            refVx = velocityX[nr][nc]; \r\n                            refVy = velocityY[nr][nc]; \r\n                            refP = pressure[nr][nc];   \r\n                            refRho = density[nr][nc];\r\n                            refT = temperature[nr][nc];    \r\n                            foundRef = true;\r\n                        } \r\n                    } \r\n                }\r\n            }\r\n\r\n            if (foundRef) {\r\n                //wall distance and boundary layer effects\r\n                const topWallY = getWallY(xCanvas, true, controlPoints, scaleY, canvasHeight);\r\n                const bottomWallY = getWallY(xCanvas, false, controlPoints, scaleY, canvasHeight);\r\n                const distToTopWall = Math.abs(yCanvas - topWallY);\r\n                const distToBottomWall = Math.abs(yCanvas - bottomWallY);\r\n                const minDistToWall = Math.min(distToTopWall, disTopBottomWall);\r\n                \r\n                const boundaryThickness = Math.max(cellWidth, cellHeight,) * 1.5;\r\n                const wallDistance = Math.min(1.0, minDistToWall  /boundaryThickness);\r\n                const velocityFactor = Math.pow(wallDistance, 0.3);\r\n\r\n                newVx[row][col] = refVx * velocityFactor;     \r\n                newVy[row][col] = refVy * velocityFactor * 0.7;     \r\n                newP[row][col] = refP;      \r\n                newRho[row][col] = refRho;     \r\n                newT[row][col] = refT;     \r\n            }         \r\n        }   \r\n    }\r\n\r\n    //exit boundary conditions\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = cols - 4; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                const gradient = col > 0 ? (velocityX[row][col] - velocityX[row][col - 1]) / cellWidth : 0;\r\n\r\n                newVx[row][col] = Math.max(velocityX[row][col], velocityX[row][col] + gradient * cellWidth);\r\n                newVy[row][col] = velocityY[row][col];\r\n                newP[row][col] = Math.max(50000, pressure[row][col] * .98);\r\n                newRho[row][col] = density[row][col] * .99;\r\n                newT[row][col] = temperature[row][col];\r\n            }\r\n        }\r\n    }\r\n\r\n    //Apply under-relaxation for stability \r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (!isInside[row][col]) continue;\r\n            velocityX[row][col] = relaxationVel * newVx[row][col] + (1 - relaxationVel) * velocityX[row][col];\r\n            velocityY[row][col] = relaxationVel * newVy[row][col] + (1 - relaxationVel) * velocityY[row][col];\r\n            pressure[row][col] = relaxationThermo * newP[row][col] + (1 - relaxationThermo) * pressure[row][col];\r\n            density[row][col] = relaxationThermo * newRho[row][col] + (1 - relaxationThermo) * density[row][col];\r\n            temperature[row][col] = relaxationThermo * newT[row][col] + (1 - relaxationThermo) * temperature[row][col];\r\n        }\r\n    }\r\n\r\n    //calculate residuals and check convergence\r\n    const residuals = calculateResiduals(simulationData);\r\n    updateConvergenceHistory(residuals);\r\n\r\n    //check for convergence\r\n    if (checkConvergence(residuals)) {\r\n        updateSimulationStatus('converged');\r\n        return false; //stop iterating\r\n    }\r\n\r\n    simulation.totalIterations++;\r\n\r\n    //max to prevent infinite loop\r\n    if (simulation.totalIterations > 10000) {\r\n        console.log('Maximum iterations reached');\r\n        return false;\r\n    }\r\n\r\n    return true; // continue iterating\r\n}\r\n\r\n//export residual functions for UI\r\n\r\nexport function getLatestResiduals(simulationData) {\r\n    return calculateResiduals(simulationData);\r\n}\r\n\r\nexport function isConverged(simulationData) {\r\n    const residuals = calculateResiduals(simulationData);\r\n    return checkConvergence(residuals);\r\n}\r\n\r\n","import { all, color } from 'three/tsl';\r\nimport { convergenceHistory, convergenceTolerances } from './core.js';\r\nimport { getWallY } from './geometry.js';\r\n\r\nexport function setupCanvas(canvas, colorbarCanvas, convergenceCanvas) {\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = 1000;\r\n    canvas.height = 500;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (colorbarCanvas) {\r\n        colorbarCanvas.width = 30;\r\n        colorbarCanvas.height = 400;\r\n    }\r\n\r\n    if (convergenceCanvas) {\r\n        convergenceCanvas.width = 380;\r\n        convergenceCanvas.height = 250;\r\n    }\r\n    \r\n    return ctx;\r\n}\r\n\r\n//nozzle rendering\r\n\r\nexport function createNozzleGeometry(ctx, simulationData) {\r\n    const { controlPoints, scaleY, canvasHeight } = simulationData;\r\n\r\n    if (!controlPoints) return;\r\n\r\n    ctx.strokeStyle = '#333';\r\n    ctx.lineWidth = 2;\r\n    ctx.fillStyle = 'rgba(100,100,100,0.3)';\r\n\r\n    const resolution = 200; //mnumber of points to draw smooth curves\r\n\r\n    //draw top wall\r\n    ctx.beginPath();\r\n    for (let i=0; i <= resolution; i++) {\r\n        const x = i / resolution * controlPoints.exit_x;\r\n        const y = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n       \r\n        if (i === 0) {\r\n            ctx.moveTo(x, y);\r\n        } else {\r\n            ctx.lineTo(x, y);\r\n        }\r\n    }\r\n\r\n    //draw bottom wall\r\n    for (let i = resolution; i >= 0; i--) {\r\n        const x = i / resolution * controlPoints.exit_x;\r\n        const y = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n        ctx.lineTo(x, y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.strokeStyle = 'rgba(0,0,0,0.4)';\r\n    ctx.lineWidth = 2;\r\n    ctx.setLineDash([10,5]);\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, canvasHeight / 2);\r\n    ctx.lineTo(controlPoints.exit_x, canvasHeight / 2);\r\n    ctx.stroke();\r\n    ctx.setLineDash([]);    \r\n}\r\n\r\n//flow visualization\r\n\r\nlet currentStats = { min: 0, avg: 0, max: 0 };\r\n\r\nexport function visualizeFlow(ctx, simulationData, callbacks = null) {\r\n    const {\r\n        rows, cols, velocityX, velocityY, pressure, temperature, density, \r\n        isInside, isBoundary, cellWidth, cellHeight, visualizationMode\r\n    } = simulationData;\r\n    \r\n    let dataArray;\r\n\r\n    switch(visualizationMode) {\r\n        case 'pressure': dataArray = pressure; break;\r\n        case 'temperature': dataArray = temperature; break;\r\n        case 'density': dataArray = density; break;\r\n        case 'velocity':\r\n            dataArray = Array.from({ length: rows }, (_, row) =>\r\n                Array.from({ length: cols }, (_, col) => {\r\n                    if (!velocityX[row]) return 0;\r\n\r\n                    const vx = velocityX[row][col] || 0;\r\n                    const vy = velocityY[row][col] || 0;\r\n                    return Math.sqrt(vx * vx + vy * vy);\r\n                })\r\n            );\r\n            break;\r\n        default: dataArray = pressure;\r\n    }\r\n\r\n    //min/max from inside domain only\r\n    const flatData = [];\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                const val = Array.isArray(dataArray[row][col]) ? dataArray[row][col] : 0;\r\n                if (!isNaN(val) && isFinite(val)) {\r\n                    flatData.push(val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (flatData.length === 0) return;\r\n\r\n    const minVal = Math.min(...flatData);\r\n    const maxVal = Math.max(...flatData);\r\n    const avgVal = flatData.reduce((a, b) => a + b, 0) / flatData.length;\r\n\r\n    currentStats = { min: minVal, avg: avgVal, max: maxVal };\r\n\r\n    if (callbacks?.onStatsUpdate) {\r\n        callbacks.onStatsUpdate({ \r\n            min: minVal, \r\n            max: maxVal, \r\n            avg: avgVal \r\n        });\r\n    }\r\n\r\n    //enable antialiasing \r\n    ctx.imageSmoothingEnabled = true;\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (!isInside[row][col]) continue;\r\n\r\n            const value = Array.isArray(dataArray[row][col]) ? dataArray[row][col] : 0;\r\n            const color = getColorFromValue(value, minVal, maxVal, visualizationMode);\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(col * cellWidth, row * cellHeight, cellWidth, cellHeight);\r\n        }\r\n    }\r\n    //update colorbar\r\n    createColorbar(minVal, maxVal, visualizationMode);\r\n}\r\n\r\n// function updateStatsDisplay(minVal, maxVal, avgVal) {\r\n//     const minElement = document.getElementById('min-label');\r\n//     const avgElement = document.getElementById('avg-label');    \r\n//     const maxElement = document.getElementById('max-label');\r\n    \r\n//     if (minElement) minElement.textContent = minVal.toFixed(3);\r\n//     if (avgElement) avgElement.textContent = avgVal.toFixed(3);\r\n//     if (maxElement) maxElement.textContent = maxVal.toFixed(3);\r\n// }\r\n\r\n//color mapping\r\n\r\nexport function getColorFromValue(value, minVal, maxVal, mode) {\r\n    if (!isFinite(value)) value = minVal;\r\n    \r\n    let normalized = 0;\r\n    if (maxVal > minVal) {\r\n        normalized = Math.max(0, Math.min(1, (value - minVal) / (maxVal - minVal)));  \r\n    }\r\n\r\n    let r, g, b;\r\n\r\n    switch(mode) {\r\n        case 'velocity':\r\n            // blue - cyan - green - yellow - red\r\n            if (normalized < 0.25) {\r\n                const t = normalized / 0.25;\r\n                r = 0; g = Math.floor(t * 255); b = 255;\r\n            } else if (normalized < 0.5) {\r\n                const t = (normalized - 0.25) / 0.25;\r\n                r = 0; g = 255; b = Math.floor(255 * (1 - t));\r\n            } else if (normalized < 0.75) {\r\n                const t = (normalized - 0.5) / 0.25;\r\n                r = Math.floor(t * 255); g = 255; b = 0;\r\n            } else {\r\n                const t = (normalized - 0.75) / 0.25;\r\n                r = 255; g = Math.floor(255 * (1 - t)); b = 0;\r\n            }\r\n            break;\r\n        case 'pressure':\r\n        case 'temperature':\r\n        case 'density':\r\n            r = Math.floor(normalized * 255);\r\n            g = 0;\r\n            b = Math.floor((1 - normalized) * 255);\r\n            break;\r\n        default:\r\n            r = Math.floor(normalized * 255);\r\n            g = Math.floor(normalized * 128);\r\n            b = Math.floor((1 - normalized) * 255);\r\n    }\r\n\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n\r\nexport function createColorbar(minVal, maxVal, mode) {\r\n    const colorbarCanvas = document.getElementById('colorbar');\r\n    if (!colorbarCanvas) return;\r\n\r\n    const colorbarCtx = colorbarCanvas.getContext('2d');\r\n    const height = colorbarCanvas.height;\r\n    const width = colorbarCanvas.width;\r\n\r\n    colorbarCtx.clearRect(0, 0, width, height);\r\n\r\n    const gradient = colorbarCtx.createLinearGradient(0,height,0,0);\r\n\r\n    const steps = 20;\r\n    for (let i = 0; i <= steps; i++) {\r\n        const ratio = i / steps;\r\n        const value = minVal + ratio * (maxVal - minVal);\r\n        const color = getColorFromValue(value, minVal, maxVal, mode);\r\n        gradient.addColorStop(ratio, color);\r\n    }\r\n\r\n    colorbarCtx.fillStyle = gradient;\r\n    colorbarCtx.fillRect(0, 0, width, height);\r\n\r\n    colorbarCtx.strokeStyle = '#ccc';\r\n    colorbarCtx.lineWidth = 1;\r\n    colorbarCtx.strokeRect(0, 0, width, height);\r\n\r\n    const maxLabel = document.getElementById('max-label');\r\n    // const midLabel = document.getElementById('mid-label');\r\n    const minLabel = document.getElementById('min-label');\r\n    const titleLabel = document.getElementById('colorbar-title');\r\n\r\n    if (maxLabel) maxLabel.textContent = maxVal.toFixed(3);\r\n    // if (midLabel) midLabel.textContent = ((maxVal + minVal) / 2).toFixed(3);\r\n    if (minLabel) minLabel.textContent = minVal.toFixed(3);\r\n\r\n    const titles = {\r\n        'velocity': 'Velocity (m/s)',\r\n        'pressure': 'Pressure (Pa)',\r\n        'temperature': 'Temperature (K)',\r\n        'density': 'Density (kg/mÂ³)'\r\n    };\r\n    if (titleLabel) titleLabel.textContent = titles[mode] || 'Value';\r\n}\r\n  \r\n//convergence chart\r\n\r\nexport function drawConvergenceChart(canvas) {\r\n    if (!canvas) {  // safety check\r\n        console.warn(\"Convergence canvas not found\");\r\n        return;\r\n    }\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        console.warn(\"Could not get convergence canvas context\");\r\n        return;\r\n    }\r\n\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.fillStyle = 'rgba(0,0,0,0.8)';\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    if (!convergenceHistory ||convergenceHistory.velocity.length < 2) {\r\n        //Draw \"no data\" message\r\n        ctx.fillStyle = 'rgba(255,255,255,0.8)';\r\n        ctx.font = '16px Arial';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('No convergence data yet', width / 2, height / 2);\r\n    }\r\n\r\n    //find range for logarithmic scale\r\n    const allValues = [\r\n        ...convergenceHistory.velocity.filter(v => isFinite(v) && v > 0), \r\n        ...convergenceHistory.pressure.filter(v => isFinite(v) && v > 0), \r\n        ...convergenceHistory.mass.filter(v => isFinite(v) && v > 0)\r\n    ];\r\n\r\n    if (allValues.length === 0) {\r\n        ctx.fillstyle = 'rgba(255,255,255,0.8)';\r\n        ctx.font = '16px Arial';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('Invalid convergence data', width / 2, height / 2);\r\n        return;\r\n    }\r\n    const minVal = Math.max(1e-12, Math.min(...allValues));\r\n    const maxVal = Math.max(minVal * 10, Math.max(...allValues));\r\n\r\n    const logMin = Math.log10(minVal);\r\n    const logMax = Math.log10(maxVal);\r\n    const logRange = logMax - logMin;\r\n\r\n    if (logRange <= 0) {\r\n        ctx.fillstyle = 'rgba(255,255,255,0.8)';\r\n        ctx.font = '16px Arial';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText('Insufficient data range', width / 2, height / 2);\r\n        return;\r\n    }\r\n\r\n    // Draw Grid\r\n    drawChartGrid(ctx, width, height, logMin, logMax, logRange);\r\n    drawConvergenceLines(ctx, width, height, logMin, logRange);\r\n    drawConvergenceLabels(ctx, width, height, logMin, logRange);\r\n    drawChartLegend(ctx, width, height);\r\n}\r\n\r\nfunction drawChartGrid(ctx, width, height, logMin, logMax, logRange) {\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.2)';\r\n    ctx.lineWidth = 1;\r\n    ctx.font = '10px Arial';\r\n    ctx.fillStyle = 'rgba(255,255,255,0.7)';\r\n\r\n    //horizontal grid lines (power of 10)\r\n    for (let power = Math.floor(logMin); power <= Math.ceil(logMax); power++) {\r\n        const y = height - ((power - logMin) / logRange) * height;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(width, y);\r\n        ctx.stroke();\r\n\r\n        //labels\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText(`1e${power}`, 5, y - 2);\r\n    }\r\n\r\n    //Vertical grid lines\r\n    const dataLength = convergenceHistory.velocity.length;\r\n    if (dataLength > 1) {\r\n        const stepSize = Math.max(1, Math.floor(dataLength / 5));\r\n        for (let i = 0; i < dataLength; i += stepSize) {\r\n            const x = (i / (dataLength - 1)) * width;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, height);\r\n            ctx.stroke();\r\n\r\n            //X-axis labels\r\n            if (i % (stepSize * 2) === 0) {\r\n                ctx.textAlign = 'center';\r\n                ctx.fillText(i.toString(), x, height - 5);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawConvergenceLines(ctx, width, height, logMin, logRange) {\r\n    const datasets = [\r\n        { data: convergenceHistory.velocity, color: 'blue', label: 'Velocity' },\r\n        { data: convergenceHistory.pressure, color: 'green', label: 'Pressure' },\r\n        { data: convergenceHistory.mass, color: 'red', label: 'Mass' }\r\n    ];\r\n\r\n    datasets.forEach(dataset => {\r\n        if (dataset.data.length < 2) return;\r\n\r\n        ctx.strokeStyle = dataset.color;\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n\r\n        let pathStarted = false;\r\n        for (let i = 0; i < dataset.data.length; i++) {\r\n            const value = dataset.data[i];\r\n            if (!isFinite(value) || value <= 0) continue;\r\n\r\n            const x = dataset.data.length > 1 ? (i / (dataset.data.length - 1)) * width : width / 2;\r\n            const logValue = Math.log10(Math.max(1e-12, value));\r\n            const y = height - ((logValue - logMin) / logRange) * height;\r\n\r\n            if (!pathStarted) {\r\n                ctx.moveTo(x, y);\r\n                pathStarted = true;\r\n            } else {\r\n                ctx.lineTo(x, y);\r\n            }\r\n        }\r\n\r\n        if (pathStarted) {\r\n            ctx.stroke();\r\n        }\r\n    });\r\n}\r\n\r\nfunction drawToleranceLines(ctx, width, height, logMin, logRange) {\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.7)';\r\n    ctx.lineWidth = 1;\r\n    ctx.setLineDash([5, 5]);\r\n\r\n    const tolerances = [\r\n        { value: convergenceTolerances.velocity, color: 'blue' },\r\n        { value: convergenceTolerances.pressure, color: 'green' }, \r\n        { value: convergenceTolerances.mass, color: 'red' }\r\n    ];\r\n\r\n    tolerances.forEach((tol) => {\r\n        if (tol.value <= 0) return;\r\n\r\n        const logTol = Math.log10(tol);\r\n        if (logTol < logMin || logTol > logMin + logRange) return;\r\n\r\n        const y = height - ((logTol - logMin) / logRange) * height;\r\n\r\n        ctx.strokeStyle = tol.color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(width, y);\r\n        ctx.stroke();\r\n    });\r\n\r\n    ctx.setLineDash([]);\r\n}\r\n\r\nfunction drawChartLegend(ctx, width, height) {\r\n    const legendItems = [\r\n        { color: 'blue', label: 'Velocity' },\r\n        { color: 'green', label: 'Pressure' },\r\n        { color: 'red', label: 'Mass' }\r\n    ];\r\n\r\n    ctx.font = '12px Arial';\r\n    ctx.textAlign = 'left';\r\n\r\n    legendItems.forEach((item, index) => {\r\n        const x = width - 80;\r\n        const y = 20 + index * 20;\r\n\r\n        ctx.fillStyle = item.color;\r\n        ctx.fillRect(x, y -  8, 12, 12);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillText(item.label, x + 16, y + 2);\r\n    });\r\n}\r\n\r\n//export current stats\r\nexport function getCurrentStats() {\r\n    return currentStats;\r\n}","//ui.js - ui controls and event handling\r\n\r\nimport {simulation, getAnimationId, setAnimationId, setConvergenceTolerance, getSimulationData, getCallbacks} from './core.js';\r\nimport { updateFlowStabilized, getLatestResiduals } from \"./physics.js\";\r\nimport { visualizeFlow, createNozzleGeometry, drawConvergenceChart } from \"./rendering.js\"; \r\n\r\n//simulation status updates\r\n\r\nexport function updateSimulationStatus(status) {\r\n    simulation.state = status;\r\n    const statusElement = document.getElementById('simulation-status');\r\n    const indicatorElement = document.getElementById('status-indicator');\r\n    const startBtn = document.getElementById('start-btn');\r\n    const pauseBtn = document.getElementById('pause-btn');\r\n\r\n    //skip DOM updates is elements not found (for testing)\r\n    if (!statusElement || !indicatorElement || !startBtn || !pauseBtn) {\r\n        console.log('Status updated to: ', status, '(DOM elements not found)');\r\n        return;\r\n    }\r\n    \r\n    const statusMap = {\r\n        'running': { text: 'Running', class: 'status-indicator status-running', startDisabled: true, pauseDisabled: false },\r\n        'paused': { text: 'Paused', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'converged': { text: 'Converged', class: 'status-indicator status-converged', startDisabled: false, pauseDisabled: true },\r\n        'stopped': { text: 'Ready', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'ready': { text: 'Ready', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'error': { text: 'Error', class: 'status-indicator status-error', startDisabled: true, pauseDisabled: true }\r\n    };\r\n\r\n    const config = statusMap[status.toLowerCase()];\r\n    if(!config) {\r\n        console.warm('Unknown status:', status);\r\n        return;\r\n    }\r\n\r\n    statusElement.textContent = config.text;\r\n    indicatorElement.className = config.class;\r\n    startBtn.disabled = config.startDisabled;\r\n    pauseBtn.disabled = config.pauseDisabled;\r\n\r\n    console.log('Status updated to:', config.text);\r\n}\r\n\r\nexport function updateConvergenceDisplay(residuals) {\r\n    const timeStepElement = document.getElementById('time-step');\r\n    const totalIterationsElement = document.getElementById('total-iterations');\r\n    const velocityResidualElement = document.getElementById('velocity-residual');\r\n    const pressureResidualElement = document.getElementById('pressure-residual');\r\n    const massResidualElement = document.getElementById('mass-residual');\r\n\r\n    if (timeStepElement) timeStepElement.textContent = simulation.timeStep;\r\n    if (totalIterationsElement) totalIterationsElement.textContent = simulation.totalIterations;\r\n    if (velocityResidualElement) velocityResidualElement.textContent = residuals.velocity.toExponential(3);\r\n    if (pressureResidualElement) pressureResidualElement.textContent = residuals.pressure.toExponential(3);\r\n    if (massResidualElement) massResidualElement.textContent = residuals.mass.toExponential(3);\r\n\r\n    const callbacks = getCallbacks();\r\n    if (callbacks?.onConvergenceUpdate) {\r\n        callbacks.onConvergenceUpdate({\r\n            timeStep: simulation.timeStep,\r\n            totalIterations: simulation.totalIterations,\r\n            velocityResidual: residuals.velocity.toExponential(3),\r\n            pressureResidual: residuals.pressure.toExponential(3),\r\n            massResidual: residuals.mass.toExponential(3),\r\n        });\r\n    }\r\n\r\n    const convergenceCanvas = document.getElementById('convergence-canvas');\r\n    if (convergenceCanvas) {\r\n        try {\r\n            drawConvergenceChart(convergenceCanvas);\r\n        } catch (error) {\r\n            console.error('Error drawing convergence chart:', error);\r\n        }\r\n    }\r\n}\r\n\r\n//tolerance controls\r\n\r\nexport function updateTolerances() {\r\n    const velToleranceInput = document.getElementById('vel-tolerance');\r\n    const pressToleranceInput = document.getElementById('press-tolerance');\r\n    const massToleranceInput = document.getElementById('mass-tolerance');\r\n\r\n    if (velToleranceInput) {\r\n        const value = parseFloat(velToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('velocity', value);\r\n    }\r\n\r\n    if (pressToleranceInput) {\r\n        const value = parseFloat(pressToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('pressure', value);\r\n    }\r\n\r\n    if (massToleranceInput) {\r\n        const value = parseFloat(massToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('mass', value);\r\n    }\r\n\r\n}\r\n\r\nexport function setupToleranceControls() {\r\n    const toleranceIds = ['vel-tolerance', 'press-tolerance', 'mass-tolerance'];\r\n\r\n    toleranceIds.forEach((id) => {\r\n        const input = document.getElementById(id);\r\n        if (input) {\r\n            input.addEventListener('change', updateTolerances);\r\n            input.addEventListener('input', updateTolerances); //real-time updates\r\n        }\r\n    });\r\n}\r\n\r\n//animation loop\r\n\r\nexport function startAnimationLoop(canvas, simulationData, callbacks) {\r\n    console.log('Stating animation loop...');\r\n\r\n    const animate = () => {\r\n        if (simulation.state !== 'running') {\r\n            console.log('Animation loop stopped - simulation not running');\r\n            return;\r\n        }\r\n\r\n        if (!simulationData) {\r\n            console.error('Simulation data not available for animation');\r\n            return;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n            console.error('Failed to get canvas context');\r\n            return;\r\n        }\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        //update physics every frame\r\n        if (simulation.timeStep % 1 === 0) {\r\n            updateTolerances();\r\n\r\n            let shouldContinue;\r\n            try {\r\n                shouldContinue = updateFlowStabilized(simulationData);\r\n            } catch (error) {\r\n                console.error('Error updating flow: ', error);\r\n                simulation.state = 'error';\r\n                updateSimulationStatus('error');\r\n                return;\r\n            }\r\n\r\n            //update convergence display every 5 frames\r\n            if (simulation.timeStep % 5 === 0) {\r\n                try {\r\n                    const residuals = getLatestResiduals(simulationData);\r\n                    updateConvergenceDisplay(residuals);\r\n                } catch (error) {\r\n                    console.error('Error updating convergence display: ', error);\r\n                }\r\n            }\r\n\r\n            if (!shouldContinue) {\r\n                //simulation converged or failed\r\n                const animationId = getAnimationId();\r\n                if(animationId !== null) {\r\n                    cancelAnimationFrame(animationId);\r\n                    setAnimationId(null);\r\n                }\r\n                simulation.state = 'converged';\r\n                updateSimulationStatus('converged');\r\n\r\n                renderFinalState(ctx, simulationData, callbacks);\r\n                return;\r\n            }\r\n        }\r\n\r\n        simulation.timeStep++;\r\n\r\n        try {\r\n            renderCurrentFrame(ctx, simulationData, callbacks);\r\n        } catch (error) {\r\n            console.error('Error rendering frame: ', error);\r\n        }\r\n\r\n        const newAnimationId = requestAnimationFrame(animate);\r\n        setAnimationId(newAnimationId);\r\n    };\r\n\r\n    const animationId = requestAnimationFrame(animate);\r\n    setAnimationId(animationId);\r\n}\r\n\r\nexport function stopAnimationLoop() {\r\n    const animationId = getAnimationId();\r\n    if(animationId !== null) {\r\n        cancelAnimationFrame(animationId);\r\n        setAnimationId(null);\r\n        console.log('Animation loop stopped');\r\n    }\r\n}\r\n\r\nfunction renderCurrentFrame(ctx, simulationData, callbacks) {\r\n    visualizeFlow(ctx, simulationData, callbacks);\r\n    createNozzleGeometry(ctx, simulationData);\r\n}\r\n\r\nfunction renderFinalState(ctx, simulationData, callbacks) {\r\n    console.log('Rendering final convergeed state');\r\n    renderCurrentFrame(ctx, simulationData, callbacks);\r\n}\r\n\r\n//event handlers setup\r\n\r\nlet controlHandlers = null;\r\n\r\nexport function setupControlButtons(simulationControl) {\r\n    const startBtn = document.getElementById('start-btn');\r\n    const pauseBtn = document.getElementById('pause-btn');\r\n    const resetBtn = document.getElementById('reset-btn');\r\n\r\n    //store handlers to prevent multiple bindings\r\n    controlHandlers = {\r\n        start: () => {\r\n            console.log('Start button clicked');\r\n            if (simulationControl?.start) {\r\n                simulationControl.start();\r\n            }\r\n        },\r\n        pause: () => {\r\n            console.log('Pause button clicked');\r\n            if (simulationControl?.pause) {\r\n                simulationControl.pause();\r\n            }\r\n        },\r\n        reset: () => {\r\n            console.log('Reset button clicked');\r\n            if (simulationControl?.reset) {\r\n                simulationControl.reset();\r\n            }\r\n        }\r\n    };\r\n\r\n    if (startBtn) {\r\n        startBtn.removeEventListener('click', controlHandlers.start); //remove existing\r\n        startBtn.addEventListener('click', controlHandlers.start);\r\n    }\r\n    if (pauseBtn) {\r\n        pauseBtn.removeEventListener('click', controlHandlers.pause);\r\n        pauseBtn.addEventListener('click', controlHandlers.pause);\r\n    }\r\n    if (resetBtn) {\r\n        resetBtn.removeEventListener('click', controlHandlers.reset);\r\n        resetBtn.addEventListener('click', controlHandlers.reset);\r\n    }\r\n\r\n    console.log('Control buttons setup complete');\r\n}\r\n\r\nexport function setupVisualizationModeControls() {\r\n    const radios = document.querySelectorAll('input[name=\"vizMode\"]');\r\n\r\n    radios.forEach((radio) => {\r\n        radio.addEventListener('change', (e) => {\r\n            const simulationData = getSimulationData();\r\n            if (simulationData) {\r\n                simulationData.visualizationMode = e.target.value;\r\n\r\n                //immediately update visualization\r\n                const canvas = document.getElementById('fea-canvas');\r\n                if (canvas) {\r\n                    const ctx = canvas.getContext('2d');\r\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                    renderCurrentFrame(ctx, simulationData, getCallbacks());\r\n                }\r\n\r\n                console.log('Visualization mode changed to: ', e.target.value);\r\n            }\r\n        });\r\n    });  \r\n}\r\n\r\n//resize handling\r\n\r\nexport function setupResize(canvas) {\r\n    let resizeTimeout;\r\n\r\n    const handleResize = () => {\r\n        clearTimeout(resizeTimeout);\r\n        resizeTimeout = setTimeout(() => {\r\n            console.log('Handling resize');\r\n            //resize logic goes here (FIX)\r\n        }, 150);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    //return cleanup function\r\n    return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n        clearTimeout(resizeTimeout);\r\n    };\r\n}\r\n\r\n//initialization helpers\r\n\r\nexport function initializeUI(simulationControl) {\r\n    console.log('Initializing UI controls...');\r\n\r\n    try {\r\n        setupVisualizationModeControls();\r\n        setupToleranceControls();\r\n        setupControlButtons(simulationControl);\r\n        console.log('UI initialization complete');\r\n    } catch (error) {\r\n        console.error('Error initializing UI: ', error);\r\n    }\r\n}","import { createFlowDomain } from \"./geometry.js\";\r\nimport { initializeFlow, updateFlowStabilized } from \"./physics.js\";\r\nimport { visualizeFlow, createNozzleGeometry } from \"./rendering.js\";\r\nimport { startAnimationLoop, stopAnimationLoop, updateSimulationStatus } from \"./ui.js\";\r\n\r\n//simulation state management\r\n\r\nexport const simulation = { \r\n    state: 'stopped',\r\n    timeStep: 0,\r\n    totalIterations: 0,\r\n    animationId: null,\r\n};\r\n\r\nlet _animationId = null;\r\nexport function setAnimationId(id) { _animationId = id; }\r\nexport function getAnimationId() { return _animationId; }\r\n\r\n//convergence tracking\r\nexport const convergenceHistory = {\r\n    velocity: [],\r\n    pressure: [],\r\n    mass: [],\r\n    maxHistory: 200\r\n};\r\n\r\nexport let convergenceTolerances = {\r\n    velocity: 1e-6,\r\n    pressure: 1e-6,\r\n    mass: 1e-6\r\n};\r\n\r\n//global sim data container\r\nlet simulationData = null;\r\nlet callbacks = null;\r\n\r\n//initialization\r\nexport function initFEA(canvas, inputSimulationData) {\r\n    console.log('=== FEA initialization starting ===');\r\n\r\n    if (!canvas) {\r\n        console.error('Canvas is null or undefined');\r\n        return null;\r\n    };\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        console.error('Could not get canvas context');\r\n        return null;\r\n    };\r\n\r\n    simulationData = inputSimulationData.current;\r\n\r\n    console.log('Canvas Dimensions: ', canvas.width, 'x', canvas.height);\r\n    console.log('Simulation Data: ', simulationData);\r\n\r\n    //clear canvas and show test\r\n    // ctx.fillStyle = 'red';\r\n    // ctx.fillRect(10, 10, 50, 50);\r\n    // console.log('Red test square drawn at (10,10)');\r\n\r\n    //initialize after a short delay\r\n    setTimeout(() => {\r\n        try {\r\n            initializeSimulation(canvas, ctx);\r\n            console.log('=== FEA initialization complete ===');\r\n        } catch (error) {\r\n            console.error('Failed to initialize FEA: ', error);\r\n            updateSimulationStatus('error');\r\n        }\r\n    }, 100);\r\n\r\n    return createSimulationControl(canvas);\r\n}\r\n\r\nfunction initializeSimulation(canvas, ctx) {\r\n    ctx.clearRect(0,0, canvas.width, canvas.height);\r\n\r\n    //setup canvas dims in simualtion data\r\n    setupCanvasDimensions(canvas);\r\n\r\n    //create geometry\r\n    console.log('Creating flow domain...');\r\n    createFlowDomain(simulationData);\r\n    console.log('Flow domain created. isInside length: ', simulationData.isInside?.length);\r\n    \r\n    initializeFlowArrays();\r\n\r\n    initializeFlow(simulationData); \r\n\r\n    renderCurrentState(ctx);\r\n\r\n    updateSimulationStatus('ready');\r\n}\r\n\r\nfunction setupCanvasDimensions(canvas) {\r\n    simulationData.canvasWidth = canvas.width;\r\n    simulationData.canvasHeight = canvas.height;\r\n\r\n    const maxNozzleWidth = simulationData.cointrolPoints.exit_x;\r\n    const scaleX = (canvas.width * 0.9) / maxNozzleWidth;\r\n\r\n    //scale control points with Canvas\r\n    Object.keys(simulationData.controlPoints).forEach(key => {\r\n        if (key.includes('_x' || key === 'exit_x')) {\r\n            simulationData.controlPoints[key] *= scaleX;\r\n        }\r\n    });\r\n\r\n    //adjust scaleY to fit canvas height\r\n    const maxRadius = Math.max(\r\n        simulationData.controlPoints.inlet_radius,\r\n        simulationData.controlPoints.exit_radius,\r\n        simulationData.controlPoints.throat_radius\r\n    );\r\n    simulationData.scaleY = (canvas.height * 0.35) / maxRadius;\r\n\r\n    simulationData.cellWidth = simulationData.canvasWidth / simulationData.cols;\r\n    simulationData.cellHeight = simulationData.canvasHeight / simulationData.rows;\r\n}\r\n\r\nfunction initializeFlowArrays() {\r\n    const { rows, cols } = simulationData;\r\n\r\n    //force re-initialization even if arrays already exist\r\n    simulationData.velocityX = [];\r\n    simulationData.velocityY = [];\r\n    simulationData.pressure = [];\r\n    simulationData.temperature = [];\r\n    simulationData.density = [];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        simulationData.velocityX[row] = new Array(cols).fill(0);\r\n        simulationData.velocityY[row] = new Array(cols).fill(0);\r\n        simulationData.pressure[row] = new Array(cols).fill(101325);\r\n        simulationData.temperature[row] = new Array(cols).fill(300);\r\n        simulationData.density[row] = new Array(cols).fill(1.225);\r\n    }\r\n}\r\n\r\n// function createTestData() {\r\n//     const { rows, cols, isInside } = simulationData;\r\n\r\n//     for (let row = 0; row < rows; row++) {\r\n//         for (let col = 0; col < cols; col++) {\r\n//             if (isInside && isInside[row] && isInside[row][col]) {\r\n//                 const progress = col / (cols - 1);\r\n//                 simulationData.velocityX[row][col] = 50 + progress * 100;\r\n//                 simulationData.velocityY[row][col] = Math.sin(progress * Math.PI) * 5;\r\n//                 simulationData.pressure[row][col] = 101325 + (1 - progress * 0.3);\r\n//                 simulationData.temperature[row][col] = 300 - progress * 50;\r\n//                 simulationData.density[row][col] = 1.225 * (1 - progress * 0.2);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\nfunction renderCurrentState(ctx) {\r\n    try {\r\n        createNozzleGeometry(ctx, simulationData);\r\n\r\n        visualizeFlow(ctx, simulationData, callbacks);\r\n\r\n        console.log('Initial rendering complete');\r\n    } catch (error) {\r\n        console.error('Error rendering initial state: ', error);\r\n    }\r\n}\r\n\r\n//simulation control interface\r\n\r\nfunction createSimulationControl(canvas) {\r\n    return {\r\n        start: () => startSimulation(canvas),\r\n        pause: () => pauseSimulation(),\r\n        reset: () => resetSimulation(canvas),\r\n        setTolerance: (type, value) => setTolerance(type, value),\r\n        setCallbacks: (newCallbacks) => setCallbacks(newCallbacks),\r\n        updateVisualization: () => updateVisualization(canvas),\r\n        cleanup: () => cleanupSimulation()\r\n    };\r\n}\r\n\r\nfunction startSimulation(canvas) {\r\n    console.log('Starting simulation...');\r\n    simulation.state = 'running';\r\n    updateSimulationStatus('running');\r\n\r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('running');\r\n    }\r\n\r\n    startAnimationLoop(canvas, simulationData, callbacks);\r\n}\r\n\r\nfunction pauseSimulation() {\r\n    console.log('Pausing simulation...');\r\n    simulation.state = 'paused';\r\n    updateSimulationStatus('paused');\r\n\r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('paused');\r\n    }\r\n\r\n    stopAnimationLoop();\r\n}\r\n\r\nfunction resetSimulation(canvas) {\r\n    console.log('Resetting simulation...');\r\n\r\n    stopAnimationLoop();\r\n\r\n    simulation.state = 'stopped';\r\n    simulation.timeStep = 0;\r\n    simulation.totalIterations = 0;\r\n\r\n    //clear conv hist\r\n    convergenceHistory.velocity = [];\r\n    convergenceHistory.pressure = [];\r\n    convergenceHistory.mass = [];\r\n\r\n    //reset flow arrays -> reinitialize flow\r\n    initializeFlowArrays();\r\n\r\n    try {\r\n        initializeFlow(simulationData);\r\n        // createTestData();\r\n    } catch (error) {\r\n        console.log('Error reinitializing flow: ', error);\r\n    }\r\n\r\n    updateSimulationStatus('ready');\r\n    \r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('ready');\r\n    }\r\n\r\n    if (callbacks?.onConvergenceUpdate) {\r\n        callbacks.onConvergenceUpdate({\r\n            timeStep: 0,\r\n            totalIterations: 0,\r\n            velocityResidual: '-',\r\n            pressureResidual: '-',\r\n            massResidual: '-',\r\n        });\r\n    }\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    renderCurrentState(ctx);\r\n}\r\n\r\nfunction setTolerance(type, value) {\r\n    console.log(`Setting ${type} tolerance to ${value}`);\r\n    if (type in convergenceTolerances) {\r\n        convergenceTolerances[type] = value;\r\n    }\r\n}\r\n\r\nfunction setCallbacks(newCallbacks) {\r\n    callbacks = newCallbacks;\r\n    console.log('Callbacks set: ', Object.keys(callbacks || {}));\r\n}\r\n\r\nfunction updateVisualization(canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    renderCurrentState(ctx);\r\n}\r\n\r\nfunction cleanupSimulation() {\r\n    console.log('Cleaning up simulation...');\r\n    simulation.state = 'stopped';\r\n    stopAnimationLoop();\r\n}\r\n\r\n//export getters for other files\r\n\r\nexport function getSimulationData() {\r\n    return simulationData;\r\n}\r\n\r\nexport function getCallbacks() {\r\n    return callbacks;\r\n}\r\n\r\nexport function setConvergenceTolerance(type, value) {\r\n    if (type in convergenceTolerances) {\r\n        convergenceTolerances[type] = value;\r\n    }\r\n}","import '../styles.css';\r\nimport Banner from '../components/Banner/banner.jsx';\r\nimport { useRef, useEffect, useState, useCallback } from 'react';\r\nimport { initFEA } from './FEA/core.js';\r\nimport { initializeUI } from './FEA/ui.js';\r\nimport { setupCanvas, drawConvergenceChart } from './FEA/rendering.js';\r\n\r\nexport default function FEA() {\r\n    const convergenceCanvasRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const colorbarRef = useRef(null);\r\n    const [simulationStatus, setSimulationStatus] = useState('Initializing');\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [visualizationMode, setVisualizationMode] = useState('velocity');\r\n    const [stats, setStats] = useState({ min : 0, avg: 0, max: 0});\r\n    const [convergenceData, setConvergenceData] = useState({\r\n        timeStep: 0,\r\n        totalIterations: 0,\r\n        velocityResidual: '-',\r\n        pressureResidual: '-',\r\n        massResidual: '-',\r\n    });\r\n\r\n    const simulationRef = useRef(null);\r\n    const simulationControlRef = useRef(null);\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n    const [canvasDimensions, setCanvasDimensions] = useState({ width: 800, height: 400 });\r\n    \r\n    const getStatusClass = (status) => {\r\n    switch (status.toLowerCase()) {\r\n        case 'running': return 'running';\r\n        case 'paused': return 'paused';\r\n        case 'ready': return 'ready';\r\n        case 'error': return 'error';\r\n        default: return 'unknown';\r\n    }\r\n    };\r\n\r\n    const simulationData = useRef({\r\n        controlPoints: {\r\n            inlet_radius: 20,\r\n            inlet_length: 50,\r\n            cp1x: 60, cp1y: 25,\r\n            cp2x: 100, cp2y: 40,\r\n            cp3x: 150, cp3y: 60,\r\n            throat_x: 90, throat_radius: 15,\r\n            switcher_x: 120, switcher_y: 35,\r\n            exit_x: 200, exit_radius: 30,\r\n        },\r\n        scaleY: 2,\r\n        rows: 100,\r\n        cols: 200,\r\n        cellWidth: 5,\r\n        cellHeight: 5,\r\n        canvasHeight: 500,\r\n        visualizationMode: visualizationMode,\r\n        velocityX: [],\r\n        velocityY: [],\r\n        pressure: [],\r\n        temperature: [],\r\n        density: [],\r\n        isInside: [],\r\n        isBoundary: [],\r\n        // wallAngleTop: [],\r\n        // wallAngleBottom: [],\r\n    });\r\n\r\n    //responsive canvas sizing\r\n    const updateCanvasSize = useCallback(() => {\r\n        const container = canvasRef.current?.parentElement;\r\n        if (container) {\r\n            const containerWidth = container.clientWidth - 120; // for colorbar\r\n            const maxWidth = 800;\r\n            const maxHeight = 400;\r\n\r\n            let width = Math.min(containerWidth, maxWidth);\r\n            let height = (width / maxWidth) * maxHeight;\r\n\r\n            //ensure minimum size\r\n            if (width < 600) {\r\n                width = 600;\r\n                height = 300;\r\n            }\r\n\r\n            setCanvasDimensions({ width, height });\r\n        }\r\n    }, []);\r\n\r\n    // Update canvas dimensions on window resize\r\n    useEffect(() => {\r\n        updateCanvasSize();\r\n        window.addEventListener('resize', updateCanvasSize);\r\n        return () => window.removeEventListener('resize', updateCanvasSize);\r\n    }, [updateCanvasSize]);\r\n\r\n    // Update canvas actual size when dimensions change\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            canvasRef.current.width = canvasDimensions.width;\r\n            canvasRef.current.height = canvasDimensions.height;\r\n            canvasRef.current.style.width = `${canvasDimensions.width}px`;\r\n            canvasRef.current.style.height = `${canvasDimensions.height}px`;\r\n        }\r\n    }, [canvasDimensions]);\r\n\r\n    //update visualization mode in simulation data when changed\r\n    useEffect(() => {\r\n        if (isInitialized && simulationData.current) {\r\n            simulationData.current.visualizationMode = visualizationMode;\r\n        }\r\n    }, [visualizationMode, isInitialized]);\r\n\r\n    const handleStart = useCallback(() => {\r\n        if (simulationControlRef.current?.start) {\r\n            simulationControlRef.current.start();\r\n            setIsRunning(true);\r\n            setSimulationStatus('Running');\r\n        }\r\n    }, []);\r\n\r\n    const handlePause = useCallback(() => {\r\n        if (simulationControlRef.current?.pause) {\r\n            simulationControlRef.current.pause();\r\n            setIsRunning(false);\r\n            setSimulationStatus('Paused');\r\n        }\r\n    }, []);\r\n\r\n    const handleReset = useCallback(() => {\r\n        if (simulationControlRef.current?.reset) {\r\n            simulationControlRef.current.reset();\r\n            setIsRunning(false);\r\n            setSimulationStatus('Reset');\r\n            setStats({ min : 0, avg: 0, max: 0});\r\n            setConvergenceData({\r\n                timeStep: 0,\r\n                totalIterations: 0,\r\n                velocityResidual: '-',\r\n                pressureResidual: '-',\r\n                massResidual: '-',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const handleToleranceChange = useCallback((type, value) => {\r\n        if (simulationControlRef.current?.setTolerance) {\r\n            simulationControlRef.current.setTolerance(type, parseFloat(value));\r\n        }\r\n    }, []);\r\n\r\n    //main initialization effect\r\n    useEffect(() => {\r\n        let timeoutId;\r\n\r\n        const initializeSimulation = () => {\r\n            console.log('Initializing FEA simulation...');\r\n            console.log('Canvas ref:', canvasRef.current);\r\n            console.log('Simulation data:', simulationData.current);\r\n    \r\n            if (!canvasRef.current) {\r\n                console.log('Canvas not ready yet, retrying');\r\n                timeoutId = setTimeout(initializeSimulation, 100);\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                console.log('Canvas is ready, initializing FEA...');\r\n                \r\n                //setup canvas dims\r\n                setupCanvas(\r\n                    canvasRef.current,\r\n                    document.getElementById('colorbar'),\r\n                    convergenceCanvasRef.current\r\n                );\r\n\r\n                simulationData.current.canvasHeight = canvasDimensions.height;\r\n\r\n                simulationControlRef.current = initFEA(canvasRef.current, simulationData);\r\n    \r\n                if (simulationControlRef.current) {\r\n                    //callbacks for React state updates\r\n                    simulationControlRef.current.setCallbacks({\r\n                        onStatusUpdate: setSimulationStatus,\r\n                        onStatsUpdate: setStats,\r\n                        onConvergenceUpdate: setConvergenceData\r\n                    });\r\n\r\n                    initializeUI(simulationControlRef.current);\r\n\r\n                    setIsInitialized(true);\r\n                    setSimulationStatus('Ready');\r\n                    console.log('FEA initialization successful');\r\n                } else {\r\n                    console.error('Failed to get simulation control interface');\r\n                    setSimulationStatus('Error');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error initializing FEA:', error);\r\n                setSimulationStatus('Error');\r\n            }\r\n        };\r\n\r\n        timeoutId = setTimeout(initializeSimulation, 200);\r\n\r\n        //initialize convergence chart\r\n        const initChart = () => {\r\n            if (convergenceCanvasRef.current) {\r\n                try {\r\n                    drawConvergenceChart(convergenceCanvasRef.current);\r\n                } catch (error) {\r\n                    console.error('Failed to draw initial convergence chart', error);\r\n                }\r\n            }\r\n        };\r\n        setTimeout(initChart, 300);\r\n\r\n        //cleanup fn\r\n        return () => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (simulationControlRef.current?.cleanup) {\r\n                simulationControlRef.current.cleanup();\r\n            }\r\n        }\r\n    \r\n    }, [canvasDimensions]);\r\n\r\n    const handleVisualizationModeChange = useCallback((e) => {\r\n        setVisualizationMode(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Banner />\r\n            <div className=\"title\">\r\n                <h1>FEA Nozzle Simulator</h1>\r\n            </div>\r\n            <div className=\"main-layout\">\r\n                <div className=\"left-section\">\r\n                    <div className=\"canvas-area\">\r\n                        <canvas \r\n                            ref={canvasRef} \r\n                            id=\"fea-canvas\" \r\n                            width=\"1000\" \r\n                            height=\"500\"\r\n                            style={{\r\n                                width: `${canvasDimensions.width}px`,\r\n                                height: `${canvasDimensions.height}px`\r\n                            }} \r\n                        />\r\n                        <div className=\"colorbar-container\">\r\n                            <div id=\"colorbar-title\" className=\"colorbar-labels\">\r\n                                {visualizationMode.charAt(0).toUpperCase() + visualizationMode.slice(1)}\r\n                            </div>\r\n                            <div id=\"max-label\" className=\"colorbar-labels\">\r\n                                {stats.max.toFixed(3)}\r\n                            </div>\r\n                            <canvas \r\n                                ref={colorbarRef}\r\n                                id=\"colorbar\" \r\n                                width=\"30\" \r\n                                height=\"300\"\r\n                            />\r\n                            <div id=\"mid-label\" className=\"colorbar-labels\" style={{ position: 'absolute', marginTop: '150px' }}>\r\n                                {stats.avg.toFixed(3)}\r\n                            </div>\r\n                            <div id=\"min-label\" className=\"colorbar-labels\">\r\n                                {stats.min.toFixed(3)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"controls\">\r\n                        <strong>Visualization Mode:</strong>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"pressure\"\r\n                                checked={visualizationMode === 'pressure'}\r\n                                onChange={handleVisualizationModeChange} \r\n                            />\r\n                            Pressure\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"velocity\" \r\n                                checked={visualizationMode === 'velocity'} \r\n                                onChange={handleVisualizationModeChange}\r\n                            />\r\n                            Velocity\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"temperature\"\r\n                                checked={visualizationMode === 'temperature'}\r\n                                onChange={handleVisualizationModeChange} \r\n                            />\r\n                            Temperature\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"density\"\r\n                                checked={visualizationMode === 'density'}\r\n                                onChange={handleVisualizationModeChange}\r\n                            />\r\n                            Density\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"stats\">\r\n                        <div className=\"stat-item\">\r\n                            Min: <span id=\"min-value\" className=\"stat-value\">{stats.min.toFixed(2)}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            Avg: <span id=\"avg-value\" className=\"stat-value\">{stats.avg.toFixed(2)}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            Max: <span id=\"max-value\" className=\"stat-value\">{stats.max.toFixed(2)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"right-section\">\r\n                    <div className=\"convergence-info\">\r\n                        <h3>Simulation Status</h3>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>\r\n                                <span  \r\n                                    className={`status-indicator ${getStatusClass(simulationStatus)}`} \r\n                                    id=\"status-indicator\"\r\n                                ></span>\r\n                            Status: \r\n                            </span>\r\n                            <span className=\"convergence-value\" id=\"simulation-status\">\r\n                                {simulationStatus}\r\n                            </span>\r\n                        </div>\r\n                         <div className=\"convergence-metric\">\r\n                            <span>Time Step:</span>\r\n                            <span className=\"convergence-value\" id=\"time-step\">\r\n                                {convergenceData.timeStep}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Iterations:</span>\r\n                            <span className=\"convergence-value\" id=\"total-iterations\">\r\n                                {convergenceData.totalIterations}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Velocity Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"velocity-residual\">\r\n                                {convergenceData.velocityResidual}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Pressure Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"pressure-residual\">\r\n                                {convergenceData.pressureResidual}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Mass Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"mass-residual\">\r\n                                {convergenceData.massResidual}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"convergence-controls\">\r\n                        <h3>Controls</h3>\r\n                        <div style={{ textAlign: 'center', marginBottom: '15px' }}>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"start-btn\"\r\n                                onClick={handleStart}\r\n                                disabled={isRunning}\r\n                            >\r\n                                Start\r\n                            </button>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"pause-btn\" \r\n                                onClick={handlePause}\r\n                                disabled={!isRunning}\r\n                            >\r\n                                Pause\r\n                            </button>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"reset-btn\"\r\n                                onClick={handleReset}\r\n                            >\r\n                                Reset\r\n                            </button>\r\n                        </div>\r\n                        <hr />\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"vel-tolerance\">Velocity Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"vel-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\"\r\n                                onChange={(e) => handleToleranceChange('velocity', e.target.value)} \r\n                            /> \r\n                        </div>\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"press-tolerance\">Pressure Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"press-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\" \r\n                                onChange={(e) => handleToleranceChange('pressure', e.target.value)}\r\n                            /> \r\n                        </div>\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"mass-tolerance\">Mass Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"mass-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\"\r\n                                onChange={(e) => handleToleranceChange('mass', e.target.value)} \r\n                            /> \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"convergence-canvas\">\r\n                        <h3>Convergence History</h3>\r\n                        <canvas \r\n                            ref={convergenceCanvasRef}\r\n                            id=\"convergence-canvas\" \r\n                            width=\"400\" \r\n                            height=\"250\"\r\n                        />\r\n                    </div>        \r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"names":["bezierQuadratic","t","p0","p1","p2","getWallY","x","top","controlPoints","scaleY","canvasHeight","cp","scaledY","calculateWallAngles","cols","cellWidth","wallAngleTop","wallAngleBottom","col","dx","y1_top","y1_bot","y2_top","y2_bot","getLocalRadius","topY","bottomY","createFlowDomain","simulationData","rows","cellHeight","wallAngles","row","xCanvas","yCanvas","distToTopWall","distToBottomWall","minDistToWall","boundaryThickness","interiorCount","boundaryCount","initializeFlow","isInside","isBoundary","P_inlet","V_inlet","T_inlet","rho_inlet","progress","prevVelocityX","prevVelocityY","prevPressure","initializePreviousArrays","storePreviousIteration","velocityX","velocityY","pressure","calculateArtificialViscosity","mach","rho","viscosityX","viscosityY","divergenceX","divergenceY","calculateResiduals","density","velResidual","pressResidual","massResidual","count","dvx","dvy","dp","rho_left","rho_right","rho_up","rho_down","vx_left","vx_right","vy_up","vy_down","drhoDx","drhoDy","massRes","updateConvergenceHistory","residuals","history","convergenceHistory","checkConvergence","velConverged","convergenceTolerances","pressConverged","massConverged","updateFlowStabilized","simulation","gamma","R","relaxationVel","relaxationThermo","temperature","maxVel","vel","dt","newVx","newVy","newP","newRho","newT","vx","vy","p","c","dpDx","dpDy","dvxDx","dvxDy","dvyDx","dvyDy","artificialViscosity","centerY","localRadius","throatRadius","wallAngle","expansionFactorY","radialPosition","convectiveX","convectiveY","accelerationX","accelerationY","maxAccel","accelX","accelY","maxVx","maxVy","speedSq","oldSpeedSq","newStaticEnthalpy","pressureRatio","refVx","refVy","refP","refRho","refT","foundRef","searchRadius","dr","dc","nr","nc","topWallY","wallDistance","velocityFactor","gradient","getLatestResiduals","setupCanvas","canvas","colorbarCanvas","convergenceCanvas","ctx","createNozzleGeometry","resolution","i","y","visualizeFlow","callbacks","visualizationMode","dataArray","_","flatData","val","minVal","maxVal","avgVal","a","b","value","color","getColorFromValue","createColorbar","mode","normalized","r","g","colorbarCtx","height","width","steps","ratio","maxLabel","minLabel","titleLabel","titles","drawConvergenceChart","allValues","v","logMin","logMax","logRange","drawChartGrid","drawConvergenceLines","drawChartLegend","power","dataLength","stepSize","dataset","pathStarted","logValue","legendItems","item","index","updateSimulationStatus","status","statusElement","indicatorElement","startBtn","pauseBtn","config","updateConvergenceDisplay","timeStepElement","totalIterationsElement","velocityResidualElement","pressureResidualElement","massResidualElement","getCallbacks","error","updateTolerances","velToleranceInput","pressToleranceInput","massToleranceInput","setConvergenceTolerance","setupToleranceControls","id","input","startAnimationLoop","animate","shouldContinue","animationId","getAnimationId","setAnimationId","renderFinalState","renderCurrentFrame","newAnimationId","stopAnimationLoop","controlHandlers","setupControlButtons","simulationControl","resetBtn","setupVisualizationModeControls","radio","e","getSimulationData","initializeUI","_animationId","initFEA","inputSimulationData","initializeSimulation","createSimulationControl","setupCanvasDimensions","initializeFlowArrays","renderCurrentState","maxNozzleWidth","scaleX","key","maxRadius","startSimulation","pauseSimulation","resetSimulation","type","setTolerance","newCallbacks","setCallbacks","updateVisualization","cleanupSimulation","FEA","convergenceCanvasRef","useRef","canvasRef","colorbarRef","simulationStatus","setSimulationStatus","useState","isRunning","setIsRunning","setVisualizationMode","stats","setStats","convergenceData","setConvergenceData","simulationControlRef","isInitialized","setIsInitialized","canvasDimensions","setCanvasDimensions","getStatusClass","updateCanvasSize","useCallback","container","containerWidth","maxWidth","maxHeight","useEffect","handleStart","handlePause","handleReset","handleToleranceChange","timeoutId","handleVisualizationModeChange","jsxs","Fragment","jsx","Banner"],"mappings":"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"}