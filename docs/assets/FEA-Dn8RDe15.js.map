{"version":3,"file":"FEA-Dn8RDe15.js","sources":["../../src/pages/FEA/geometry.js","../../src/pages/FEA/physics.js","../../src/pages/FEA/rendering.js","../../src/pages/FEA/ui.js","../../src/pages/FEA/core.js","../../src/pages/FEA.jsx"],"sourcesContent":["//geometry and flow domain creation\r\n\r\n//import { simulation } from './core.js';\r\n\r\n// BÃ©zier interpolation helper\r\nfunction bezierQuadratic(t, p0, p1, p2) {\r\n    return (1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2;\r\n}\r\n\r\n//geometry functions\r\n\r\n/**\r\n * \r\n * @param {number} x - Horizontal coordinate\r\n * @param {boolean} top - Whether to return the top or bottom of the wall\r\n * @param {object} controlPoints - Nozzle geometry control points\r\n * @param {number} scaleY - Vertical Scaling factor\r\n * @param {number} canvasHeight - Canvas height in pixels\r\n * @returns {number} Y coordinate of the wall\r\n */\r\n\r\nexport function getWallY(x, top, controlPoints, scaleY, canvasHeight) {\r\n    \r\n    //clamp x to valid range\r\n    x = Math.max(0, Math.min(x, controlPoints.exit_x));\r\n\r\n    const t = x / controlPoints.exit_x;\r\n    const cp = controlPoints;\r\n\r\n    const y = bezierQuadratic(\r\n        t,\r\n        bezierQuadratic(t, cp.inlet_radius, cp.cp1y, cp.throat_radius),\r\n        bezierQuadratic(t, cp.throat_radius, cp.cp2y, cp.switcher_y),\r\n        bezierQuadratic(t, cp.switcher_y, cp.cp3y, cp.exit_radius)\r\n    );\r\n\r\n    const scaledY = y * scaleY;\r\n\r\n    return top \r\n        ? canvasHeight / 2 - scaledY \r\n        : canvasHeight / 2 + scaledY;\r\n}\r\n\r\n/**\r\n * Calculate wall angles to allow for flow expansion tracking (for each column)\r\n * \r\n * @param {number} cols - Number of columns\r\n * @param {number} cellWidth - Width of each grid cell\r\n * @param {object} controlPoints - Nozzle control points\r\n * @param {number} scaleY - Vertical scaling factor\r\n * @param {number} canvasHeight - Canvas height in pixels\r\n * @returns {object} Arrays of top and bottom wall angles\r\n */\r\n\r\nexport function calculateWallAngles(cols, cellWidth, controlPoints, scaleY, canvasHeight) {\r\n    const wallAngleTop = Array(cols).fill(0);\r\n    const wallAngleBottom = Array(cols).fill(0);\r\n\r\n    for (let col = 0; col < cols; col++) {\r\n        const x = col * cellWidth + cellWidth / 2;\r\n        const dx = cellWidth;\r\n\r\n        if (col < cols - 1) {\r\n            const y1_top = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n            const y1_bot = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n            const y2_top = getWallY(x + dx, true, controlPoints, scaleY, canvasHeight);\r\n            const y2_bot = getWallY(x + dx, false, controlPoints, scaleY, canvasHeight);\r\n\r\n            wallAngleTop[col] = Math.atan2(y2_top - y1_top, dx);\r\n            wallAngleBottom[col] = Math.atan2(y2_bot - y1_bot, dx);\r\n        } else {\r\n            wallAngleTop[col] = wallAngleTop[col - 1] || 0;\r\n            wallAngleBottom[col] = wallAngleBottom[col - 1] || 0;\r\n        }\r\n    }\r\n\r\n    return { top: wallAngleTop, bottom: wallAngleBottom };\r\n}\r\n\r\n/**\r\n * Get local nozzle radius at a given x.\r\n * \r\n * @param {number} x - Horizontal coordinate\r\n * @param {object} controlPoints - Nozzle geometry control points\r\n * @param {number} scaleY - Vertical scaling factor\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {number} Local radius\r\n */\r\n\r\nexport function getLocalRadius(x, controlPoints, scaleY, canvasHeight) {\r\n    if (x <= 0) return controlPoints.inlet_radius * scaleY;\r\n    if (x >= controlPoints.exit_x) return controlPoints.exit_radius * scaleY;\r\n\r\n    const topY = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n    const bottomY = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n    return Math.abs(bottomY - topY) / 2;\r\n}\r\n\r\n//flow domain\r\n\r\n// Create nozzle domain (hourglass shape TO BE EDITED TO COINCIDE WITH NOZZLE GEOMETRY)\r\nexport function createFlowDomain(simulationData) {\r\n    const { rows, cols, cellWidth, cellHeight, controlPoints, scaleY, canvasHeight } = simulationData;\r\n    \r\n    console.log('Creating flow domain with dimensions:', cols, 'x', rows);\r\n\r\n    simulationData.isInside = Array.from({ length: rows }, () => Array(cols).fill(false));\r\n    simulationData.isBoundary = Array.from({ length: rows }, () => Array(cols).fill(false));\r\n\r\n    const wallAngles = calculateWallAngles(cols, cellWidth, controlPoints, scaleY, canvasHeight);\r\n    simulationData.wallAngleTop = wallAngles.top;\r\n    simulationData.wallAngleBottom = wallAngles.bottom;\r\n\r\n    //determine if each cell is inside nozzle\r\n    for (let row = 0; row < rows; row++) {    \r\n        for (let col = 0; col < cols; col++) {\r\n            const xCanvas = col * cellWidth + cellWidth / 2;\r\n            const yCanvas = row * cellHeight + cellHeight / 2;\r\n\r\n            if (xCanvas <= controlPoints.exit_x) {\r\n                const topY = getWallY(xCanvas, true, controlPoints, scaleY, canvasHeight);\r\n                const bottomY = getWallY(xCanvas, false, controlPoints, scaleY, canvasHeight);\r\n\r\n                if (yCanvas >= topY && yCanvas <= bottomY) {\r\n                    simulationData.isInside[row][col] = true;\r\n\r\n                    //use boundary layers from wall\r\n                    const distToTopWall = Math.abs(yCanvas - topY);\r\n                    const distToBottomWall = Math.abs(yCanvas - bottomY);\r\n                    const minDistToWall = Math.min(distToTopWall, distToBottomWall);\r\n                    \r\n                    //Boundary zone of 1.5 cells from wall\r\n                    const boundaryThickness = Math.max(cellWidth, cellHeight) * 1.5;\r\n                    if (minDistToWall < boundaryThickness) {\r\n                        simulationData.isBoundary[row][col] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //count interior cells for debugging\r\n    let interiorCount = 0;\r\n    let boundaryCount = 0;\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (simulationData.isInside[row][col]) {\r\n                if (simulationData.isBoundary[row][col]) {\r\n                    boundaryCount++;\r\n                } else {\r\n                    interiorCount++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(`Domain created: ${interiorCount} interior cells, ${boundaryCount} boundary cells`);\r\n}\r\n\r\n//geometry utilities\r\n\r\n/**\r\n * Check if a point is inside the nozzle geometry\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {object} controlPoints - Control points\r\n * @param {number} scaleY - Y scaling\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {boolean} True if inside nozzle\r\n */\r\nexport function isPointInsideNozzle(x, y, controlPoints, scaleY, canvasHeight) {\r\n    if (x < 0 || x > controlPoints.exit_x) return false;\r\n\r\n    const topY = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n    const bottomY = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n\r\n    return y >= topY && y <= bottomY;\r\n}\r\n\r\n/**\r\n * Get the centerline Y coordinate (always canvas height / 2)\r\n * @param {number} canvasHeight - Canvas height\r\n * @returns {number} Centerline Y coordinate\r\n */\r\nexport function getCenterlineY(canvasHeight) {\r\n    return canvasHeight / 2;\r\n}","// physics.js - physics calculations and convergence\r\n\r\n// import { velocityX, velocityY, pressure, density, temperature,\r\n//         rows, cols, cellWidth, cellHeight, isInside, isBoundary,\r\n//         totalIterations, controlPoints, scaleY, wallAngleTop,\r\n//         wallAngleBottom } from './state.js';\r\n// import { calculateArtificialViscosity } from './stability.js';\r\n\r\n// import { calculateResiduals, checkConvergence, storePreviousIteration, \r\n//         updateConvergenceHistory } from './convergence.js';\r\n\r\n// import { updateSimulationStatus, updateConvergenceDisplay } from './loop.js';\r\n\r\n// import { getLocalRadius, getWallY } from '../geometry/nozzleGeometry.js';\r\nimport { simulation, convergenceHistory, convergenceTolerances } from './core.js';\r\n\r\n//flow initialization\r\nexport function initializeFlow(simulationData) {\r\n    const { rows, cols, isInside, isBoundary } = simulationData;\r\n\r\n    //inlet conditions (normalized for now, update later)\r\n    const P_inlet = 3.0;\r\n    const V_inlet = 0.8; \r\n    const T_inlet = 2.0;\r\n    const rho_inlet = 1.5;\r\n\r\n    console.log('Initializing flow field...');\r\n\r\n    //initialize interior cells with basic flow profile\r\n    for (let row = 0; row < rows; row++) {\r\n        for(let col = 0; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                //linear interpolation from inlet to exit\r\n                const progress = col / (cols - 1);\r\n                velocityX[row][col] = V_inlet * (1 + progress * 0.5);\r\n                velocityY[row][col] = 0.0;\r\n                pressure[row][col] = P_inlet * (1 - progress * 0.3);\r\n                density[row][col] = rho_inlet * (1 - progress * 0.2);\r\n                temperature[row][col] = T_inlet * (1 - progress * 0.1);\r\n            } else if (isBoundary[row][col]) {\r\n                //wall boundary conditions\r\n                simulationData.velocityX[row][col] =0.0;\r\n                simulationData.velocityY[row][col] = 0.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log('Flow field initialized.');\r\n}\r\n\r\n//previous iteration storage\r\n\r\nlet prevVelocityX = [];\r\nlet prevVelocityY = [];\r\nlet prevPressure = [];\r\n\r\nfunction initializePreviousArrays(rows, cols) {\r\n    if (prevVelocityX.length ===0) {\r\n        prevVelocityX = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n        prevVelocityY = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n        prevPressure = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n    }\r\n}\r\n\r\nfunction storePreviousIteration(simulationData) {\r\n    const { rows, cols, velocityX, velocityY, pressure } = simulationData;\r\n\r\n    initializePreviousArrays(rows, cols);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            prevVelocityX[row][col] = velocityX[row][col];\r\n            prevVelocityY[row][col] = velocityY[row][col];\r\n            prevPressure[row][col] = pressure[row][col];\r\n        }\r\n    }\r\n}\r\n\r\n//residual calculations\r\n\r\nfunction calculateResiduals(simulationData) {\r\n    const { rows, cols, isInside, isBoundary, velocityX, velocityY, pressure, density, cellWidth, cellHeight } = simulationData;\r\n\r\n    let velResidual = 0, pressResidual = 0, massResidual = 0;\r\n    let count = 0;\r\n\r\n    for (let row = 1; row < rows - 1; row++) {\r\n        for (let col = 1; col < cols - 1; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                // velocity residual - L2 norm\r\n                const dvx = velocityX[row][col] - prevVelocityX[row][col];\r\n                const dvy = velocityY[row][col] - prevVelocityY[row][col];\r\n                velResidual += (dvx * dvx + dvy * dvy);\r\n\r\n                //Pressure residual\r\n                const dp = pressure[row][col] - prevPressure[row][col];\r\n                pressResidual += dp * dp;\r\n\r\n                //Mass conversation residual - continuity equation\r\n                const rho = density[row][col];\r\n                const rho_left = density[row][col - 1] || rho;\r\n                const rho_right = density[row][col + 1] || rho;\r\n                const rho_up = density[row - 1][col] || rho;\r\n                const rho_down = density[row + 1][col] || rho;\r\n\r\n                const vx_left = velocityX[row][col - 1] || velocityX[row][col];\r\n                const vx_right = velocityX[row][col + 1] || velocityX[row][col];\r\n                const vy_up = velocityY[row - 1][col] || velocityX[row][col];\r\n                const vy_down = velocityY[row + 1][col] || velocityX[row][col];\r\n\r\n                //continuity - d(rho*u)/dx + d(rho*v)/dy = 0\r\n                const drhoDx = (rho_right * vx_right - rho_left * vx_left) / (2 * cellWidth);\r\n                const drhoDy = (rho_down * vy_down - rho_up * vy_up) / (2 * cellHeight);\r\n                const massRes = Math.abs(drhoDx + drhoDy);\r\n                massResidual += massRes * massRes;\r\n\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        velocity: Math.sqrt(velResidual / Math.max(count, 1)),\r\n        pressure: Math.sqrt(pressResidual / Math.max(count, 1)),\r\n        mass: Math.sqrt(massResidual / Math.max(count, 1))\r\n    };\r\n}\r\n\r\n//convergence checking \r\n\r\nfunction updateConvergenceHistory(residuals) {\r\n    const history = convergenceHistory;\r\n\r\n    history.velocity.push(residuals.velocity);\r\n    history.pressure.push(residuals.pressure);\r\n    history.mass.push(residuals.mass);\r\n\r\n    //limit history size\r\n    if (history.velocity.length > history.maxHistory) {\r\n        history.velocity.shift();\r\n        history.pressure.shift();\r\n        history.mass.shift();\r\n    }\r\n}\r\n\r\nfunction checkConvergence(residuals) {\r\n    const velConverged = residuals.velocity < convergenceTolerances.velocity;\r\n    const pressConverged = residuals.pressure < convergenceTolerances.pressure;\r\n    const massConverged = residuals.mass < convergenceTolerances.mass;\r\n    return velConverged && pressConverged && massConverged;\r\n}\r\n\r\n//main Physics update function\r\n\r\n/**\r\n * Update flow field - simplified version for testing\r\n * @param {object} simulationData - Main simulation data object\r\n * @returns {boolean} True to continue iteration, false if converged\r\n */\r\n\r\nexport function updateFlowStabilized(simulationData) {\r\n    if (simulation.state !== 'running' || !simulationData) {\r\n        return false;\r\n    }\r\n\r\n    // Store previous iteration values\r\n    storePreviousIteration(simulationData);\r\n\r\n    //simple flow update to be replaced\r\n    const { rows, cols, isInside, isBoundary } = simulationData;\r\n\r\n    //ensure arrays are intiialized\r\n    if (!simulationData.velocityX || simulationData.velocityX.length === 0) {\r\n        initializeFlow(simulationData);\r\n    }\r\n\r\n    //simple flow update\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                const progress = col / (cols - 1);\r\n                const timeEffect  = Math.sin(simulation.totalIterations * 0.1) * 0.1;\r\n\r\n                simulationData.velocityX[row][col] = 50 + progress * 100 + timeEffect * 20;\r\n                simulationData.velocityY[row][col] = Math.sin(progress * Math.PI) * 10 + timeEffect * 5;\r\n                simulationData.pressure[row][col] = 101325 * (1 - progress * 0.3 + timeEffect * 0.1);\r\n                simulationData.density[row][col] = 1.225 * (1 - progress * 0.2 + timeEffect * 0.05);\r\n                simulationData.temperature[row][col] = 300 - progress * 50 + timeEffect * 10;\r\n            }\r\n        }\r\n    }\r\n\r\n    //calculate residuals\r\n    const residuals = calculateResiduals(simulationData);\r\n    updateConvergenceHistory(residuals);\r\n\r\n    //for testing, run a limited number of iterations then return a \"converge\"\r\n    simulation.totalIterations++;\r\n\r\n    if(simulation.totalIterations > 100) {\r\n        console.log('Simulation \"Converged\" - reached max iterations');\r\n        return false; //stop iterating\r\n    }\r\n\r\n    return true; //continue iterating\r\n}\r\n\r\n//export residual functions for UI\r\n\r\nexport function getLatestResiduals(simulationData) {\r\n    return calculateResiduals(simulationData);\r\n}\r\n\r\nexport function isConverged(simulationData) {\r\n    const residuals = calculateResiduals(simulationData);\r\n    return checkConvergence(residuals);\r\n}\r\n\r\n// //noting that this is a \"stabilized\" simulation\r\n// export function updateFlowStabilized() {\r\n//     if (simulation.state !== 'running') return false;\r\n\r\n//     storePreviousIteration();\r\n\r\n//     const gamma = 1.4;\r\n//     const P_inlet = 3.0;\r\n//     const V_inlet = 0.8;\r\n//     const T_inlet = 2.0;\r\n//     const rho_inlet = 1.5;\r\n//     const relaxationVel = 0.15;\r\n//     const relaxationThermo = 0.05;\r\n    \r\n//     //Adaptive time stepping - incorporates CFL condition\r\n//     const maxVel = Math.max(...velocityX.flat(), ...velocityY.flat());\r\n//     const cfl = 0.5; // CFL number - generally taken as 0.5, up to 0.9\r\n//     const dt = Math.min(0.001, cfl * Math.min(cellWidth, cellHeight) / Math.max(maxVel, 1.0));\r\n\r\n//     //temporary arrays for smooth updates\r\n//     const newVx  = velocityX.map(row => [...row]);\r\n//     const newVy  = velocityY.map(row => [...row]);\r\n//     const newP   = pressure.map(row => [...row]);\r\n//     const newRho = density.map(row => [...row]);\r\n//     const newT = temperature.map(row => [...row]);\r\n\r\n//     //Apply inlet boundary conditions\r\n//     for (let row = 0; row < rows; row++) {\r\n//         for (let col = 0; col < 4; col++) {\r\n//             if (isInside[row][col] && !isBoundary[row][col]) {\r\n//                 newVx[row][col] = V_inlet;\r\n//                 newVy[row][col] = 0.0;\r\n//                 newP[row][col] = P_inlet;\r\n//                 newRho[row][col] = rho_inlet;\r\n//                 newT[row][col] = T_inlet;\r\n//             }\r\n//         }\r\n//     }\r\n    \r\n//     //update interior points, using central diff for sub, upwind for supersonic\r\n//     for (let row = 2; row < rows - 2; row++) {\r\n//         for (let col = 3; col < cols - 3; col++) {\r\n//             if (!isInside[row][col] || isBoundary[row][col]) continue;\r\n\r\n//             const xCanvas = col * cellWidth + cellWidth / 2;\r\n//             const yCanvas = row * cellHeight + cellHeight / 2;\r\n\r\n//             //current properties\r\n//             const rho = density[row][col];\r\n//             const vx = velocityX[row][col];\r\n//             const vy = velocityY[row][col];\r\n//             const p = pressure[row][col];\r\n\r\n//             //local speed of sound\r\n//             const c = Math.sqrt(gamma * p / rho);\r\n//             const mach = Math.sqrt(vx * vx + vy * vy) / c;\r\n            \r\n//             //derivatives\r\n//             let dpDx, dpDy, dvxDx, dvxDy, dvyDx, dvyDy;\r\n\r\n//             //subsonic flow\r\n//             if (mach < 0.8) {\r\n//                 //central difference\r\n//                 dpDx = (pressure[row][col + 1] - pressure[row][col - 1]) / (2 * cellWidth);\r\n//                 dpDy = (pressure[row + 1][col] - pressure[row - 1][col]) / (2 * cellHeight);\r\n//                 dvxDx = (velocityX[row][col + 1] - velocityX[row][col - 1]) / (2 * cellWidth);\r\n//                 dvxDy = (velocityX[row + 1][col] - velocityX[row - 1][col]) / (2 * cellHeight);\r\n//                 dvyDx = (velocityY[row][col + 1] - velocityY[row][col - 1]) / (2 * cellWidth);\r\n//                 dvyDy = (velocityY[row + 1][col] - velocityY[row - 1][col]) / (2 * cellHeight);\r\n//             } else {\r\n//                 //supersonic flow - upwind scheme\r\n//                 if (vx > 0) {\r\n//                     dpDx = (pressure[row][col] - pressure[row][col - 1]) / cellWidth;\r\n//                     dvxDx = (velocityX[row][col] - velocityX[row][col - 1]) / cellWidth;\r\n//                     dvyDx = (velocityY[row][col] - velocityY[row][col - 1]) / cellWidth;\r\n//                 } else {\r\n//                     dpDx = (pressure[row][col + 1] - pressure[row][col]) / cellWidth;\r\n//                     dvxDx = (velocityX[row][col + 1] - velocityX[row][col]) / cellWidth;\r\n//                     dvyDx = (velocityY[row][col + 1] - velocityY[row][col]) / cellWidth;\r\n//                 }\r\n\r\n//                 if (vy > 0) {\r\n//                     dpDy = (pressure[row][col] - pressure[row - 1][col]) / cellHeight;\r\n//                     dvxDy = (velocityX[row][col] - velocityX[row - 1][col]) / cellHeight;\r\n//                     dvyDy = (velocityY[row][col] - velocityY[row - 1][col]) / cellHeight;\r\n//                 } else {\r\n//                     dpDy = (pressure[row + 1][col] - pressure[row][col]) / cellHeight;\r\n//                     dvxDy = (velocityX[row + 1][col] - velocityX[row][col]) / cellHeight;\r\n//                     dvyDy = (velocityY[row + 1][col] - velocityY[row][col]) / cellHeight;\r\n//                 }\r\n//             }\r\n\r\n//             //artificial viscosity for stability\r\n//             const artificialViscosity = calculateArtificialViscosity(row, col, mach, rho);\r\n    \r\n//             //wall influence\r\n//             const centerY = canvas.height / 2;\r\n//             const localRadius = getLocalRadius(xCanvas);\r\n//             const throatRadius = controlPoints.throat_radius * scaleY;\r\n//             const wallAngle = yCanvas < centerY ? wallAngleTop[col] : wallAngleBottom[col];\r\n\r\n//             //expansion effects\r\n//             let expansionFactorY = 0;\r\n//             if (localRadius > throatRadius * 1.1) {\r\n//                 const distFromCenter = Math.abs(yCanvas - centerY);\r\n//                 const radialPosition = distFromCenter / localRadius;\r\n//                 const wallGradient = Math.sin(wallAngle);\r\n//                 expansionFactorY = wallGradient * vx * radialPosition * 0.05;\r\n//                 if (yCanvas > centerY) expansionFactorY = -expansionFactorY;\r\n//             }\r\n\r\n//             //momentum equations\r\n//             const convectiveX = vx * dvyDx + vy * dvxDy;\r\n//             const convectiveY = vx * dvxDx + vy * dvyDy;\r\n//             const accelerationX = -dpDx / Math.max(rho, 0.5) - convectiveX * 0.2 + artificialViscosity.x;\r\n//             const accelerationY = -dpDy / Math.max(rho, 0.5) - convectiveY * 0.2 + expansionFactorY + artificialViscosity.y;\r\n\r\n\r\n//             // Clamp acceleration, necessary for stability\r\n//             const maxAccel = 0.5 * c / dt; // scaled by local speed of sound\r\n//             const accelX = Math.max(-maxAccel, Math.min(maxAccel, accelerationX));\r\n//             const accelY = Math.max(-maxAccel, Math.min(maxAccel, accelerationY));\r\n\r\n//             //update velocities\r\n//             newVx[row][col] = vx + accelX * dt;\r\n//             newVy[row][col] = vy + accelY * dt;\r\n\r\n//             //apply limits\r\n//             newVx[row][col] = Math.max(0.01, Math.min(maxVx, newVx[row][col]));\r\n//             newVy[row][col] = Math.max(-maxVy, Math.min(maxVy, newVy[row][col]));\r\n            \r\n//             //pressure update isentropic equation\r\n//             const speedSq = newVx[row][col] ** 2 + newVy[row][col] ** 2;\r\n//             const oldSpeedSq = vx ** 2 + vy ** 2;\r\n//             const totalEnthalpy = gamma / (gamma - 1) * p / rho + 0.5 * oldSpeedSq;\r\n//             const newSpeedSq = Math.min(speedSq, 2 * totalEnthalpy * (gamma - 1) / gamma);\r\n\r\n//             const R = 1; // gas constant normalized because I don't have units yet\r\n\r\n//             const newStaticEnthalpy = totalEnthalpy - 0.5 * newSpeedSq;\r\n//             newT[row][col] = Math.max(0.1, newStaticEnthalpy * (gamma - 1) / gamma);\r\n//             newP[row][col] = Math.max(0.05, rho * R * newT[row][col]);\r\n\r\n//             //Isentropic density update\r\n//             const pressureRatio = Math.min(5.0, Math.max(0.01, newP[row][col] / P_inlet));\r\n//             newRho[row][col] = Math.max(0.1, rho_inlet * Math.pow(pressureRatio, 1 / gamma));\r\n\r\n//             //limits\r\n//             newT[row][col] = Math.min(3.0, Math.max(0.1, newT[row][col]));\r\n//             newP[row][col] = Math.min(4.0, Math.max(0.05, newP[row][col]));\r\n//             newRho[row][col] = Math.min(2.0, Math.max(0.1, newRho[row][col]));\r\n//         }\r\n//     }\r\n            \r\n//     //wall boundary conditions      \r\n//     for (let row = 0; row < rows; row++) {\r\n//         for (let col = 0; col < cols; col++) {\r\n//             if (!isBoundary[row][col]) continue;\r\n\r\n//             const yCanvas = row * cellHeight + cellHeight / 2;\r\n//             const xCanvas = col * cellWidth + cellWidth / 2;\r\n                    \r\n//             //calculate distance to nearest wall\r\n//             const topWallY = getWallY(xCanvas, true);\r\n//             const bottomWallY = getWallY(xCanvas, false);\r\n//             const distToTopWall = Math.abs(yCanvas - topWallY);\r\n//             const distToBottomWall = Math.abs(yCanvas - bottomWallY);\r\n//             const minDistToWall = Math.min(distToTopWall, distToBottomWall);\r\n                    \r\n//             //boundary layer thickness\r\n//             const boundaryThickness = Math.max(cellWidth, cellHeight) * 1.5;\r\n//             const wallDistance = Math.min(1.0, minDistToWall / boundaryThickness);\r\n                    \r\n//             //reference values from nearby interior points\r\n//             let refVx = V_inlet, refVy = 0, refP = P_inlet, refRho = rho_inlet, refT = T_inlet;\r\n//             let foundRef = false;\r\n                    \r\n//             //look for stable interior reference\r\n//             for (let searchRadius = 2; searchRadius <= 6 && !foundRef; searchRadius++) {\r\n//                 for (let dr = -searchRadius; dr <= searchRadius && !foundRef; dr++) {\r\n//                     for (let dc = -searchRadius; dc <= searchRadius && !foundRef; dc++) {\r\n//                         const nr = row + dr;\r\n//                         const nc = col + dc;\r\n\r\n//                         if (\r\n//                             nr >= 0 && nr < rows && \r\n//                             nc >= 0 && nc < cols && \r\n//                             isInside[nr][nc] && \r\n//                             !isBoundary[nr][nc]\r\n//                         ) { \r\n//                             refVx = velocityX[nr][nc]; \r\n//                             refVy = velocityY[nr][nc]; \r\n//                             refP = pressure[nr][nc];   \r\n//                             refRho = density[nr][nc];\r\n//                             refT = temperature[nr][nc];    \r\n//                             foundRef = true;\r\n//                         } \r\n//                     } \r\n//                 }\r\n//             }\r\n                    \r\n//             if (foundRef) {   \r\n//                 const velocityFactor = Math.pow(wallDistance, 0.3);\r\n\r\n//                 newVx[row][col] = refVx * velocityFactor;     \r\n//                 newVy[row][col] = refVy * velocityFactor * 0.7;\r\n                        \r\n//                 //properties remian continuous     \r\n//                 newP[row][col] = refP;      \r\n//                 newRho[row][col] = refRho;     \r\n//                 newT[row][col] = refT;     \r\n//             }   \r\n//         }   \r\n//     }\r\n\r\n//     //exit boundary conditions\r\n//     for (let row = 0; row < rows; row++) {\r\n//         for (let col = cols - 4; col < cols; col++) {\r\n//             if (isInside[row][col] && !isBoundary[row][col]) {\r\n//                 //extrapolate from interior\r\n//                 const gradient = (velocityX[row][col] - velocityX[row][col - 1]) / cellWidth;\r\n\r\n//                 newVx[row][col] = Math.max(velocityX[row][col], velocityX[row][col] + gradient * cellWidth);\r\n//                 newVy[row][col] = velocityY[row][col];\r\n//                 newP[row][col] = Math.max(0.01, pressure[row][col] * .98);\r\n//                 newRho[row][col] = density[row][col] * .99;\r\n//                 newT[row][col] = temperature[row][col];\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     //Apply under-relaxation for stability \r\n//     for (let row = 0; row < rows; row++) {\r\n//         for (let col = 0; col < cols; col++) {\r\n//             if (!isInside[row][col]) continue;\r\n//             velocityX[row][col] = relaxationVel * newVx[row][col] + (1 - relaxationVel) * velocityX[row][col];\r\n//             velocityY[row][col] = relaxationVel * newVy[row][col] + (1 - relaxationVel) * velocityY[row][col];\r\n//             pressure[row][col] = relaxationThermo * newP[row][col] + (1 - relaxationThermo) * pressure[row][col];\r\n//             density[row][col] = relaxationThermo * newRho[row][col] + (1 - relaxationThermo) * density[row][col];\r\n//             temperature[row][col] = relaxationThermo * newT[row][col] + (1 - relaxationThermo) * temperature[row][col];\r\n//         }\r\n//     }\r\n\r\n//     //calculate residuals and check convergence\r\n//     const residuals = calculateResiduals();\r\n//     updateConvergenceHistory(residuals);\r\n//     updateConvergenceDisplay(residuals);\r\n\r\n//     //check for convergence\r\n//     if (checkConvergence(residuals)) {\r\n//         updateSimulationStatus('converged');\r\n//         return false; //stop iterating\r\n//     }\r\n\r\n//     totalIterations++;\r\n//     return true; // continue iterating\r\n// }","import { convergenceHistory, convergenceTolerances } from './core.js';\r\nimport { getWallY } from './geometry.js';\r\n//import { simulation } from './core.js';\r\n\r\nexport function setupCanvas(canvas, colorbarCanvas, convergenceCanvas) {\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = 1000;\r\n    canvas.height = 500;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (colorbarCanvas) {\r\n        colorbarCanvas.width = 30;\r\n        colorbarCanvas.height = 400;\r\n    }\r\n\r\n    if (convergenceCanvas) {\r\n        convergenceCanvas.width = 380;\r\n        convergenceCanvas.height = 250;\r\n    }\r\n    \r\n    return ctx;\r\n}\r\n\r\n//nozzle rendering\r\n\r\nexport function createNozzleGeometry(ctx, simulationData) {\r\n    const { controlPoints, scaleY, canvasHeight } = simulationData;\r\n\r\n    if (!controlPoints) return;\r\n\r\n    ctx.strokeStyle = '#333';\r\n    ctx.lineWidth = 2;\r\n    ctx.fillStyle = 'rgba(100,100,100,0.3)';\r\n\r\n    const resolution = 100; //mnumber of points to draw smooth curves\r\n\r\n    //draw top wall\r\n    ctx.beginPath();\r\n    for (let i=0; i <= resolution; i++) {\r\n        const x = i / resolution * controlPoints.exit_x;\r\n        const y = getWallY(x, true, controlPoints, scaleY, canvasHeight);\r\n       \r\n        if (i === 0) {\r\n            ctx.moveTo(x, y);\r\n        } else {\r\n            ctx.lineTo(x, y);\r\n        }\r\n    }\r\n\r\n    //draw bottom wall\r\n    for (let i = resolution; i >= 0; i--) {\r\n        const x = i / resolution * controlPoints.exit_x;\r\n        const y = getWallY(x, false, controlPoints, scaleY, canvasHeight);\r\n        ctx.lineTo(x, y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.strokeStyle = 'rgba(0,0,0,0.3)';\r\n    ctx.lineWidth = 1;\r\n    ctx.setLineDash([5,5]);\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, canvasHeight / 2);\r\n    ctx.lineTo(controlPoints.exit_x, canvasHeight / 2);\r\n    ctx.stroke();\r\n    ctx.setLineDash([]);    \r\n}\r\n\r\n//flow visualization\r\n\r\nlet currentStats = { min: 0, avg: 0, max: 0 };\r\n\r\nexport function visualizeFlow(ctx, simulationData, callbacks = null) {\r\n    // Check for undefined rows\r\n    for (let i = 0; i < Math.min(5, simulationData.velocityX.length); i++) {\r\n        console.log(`velocityX[${i}]:`, simulationData.velocityX[i] ? `array of ${simulationData.velocityX[i].length}` : 'undefined');\r\n    }\r\n    const {\r\n        rows, cols, velocityX, velocityY, pressure, temperature, density, \r\n        isInside, isBoundary, cellWidth, cellHeight, visualizationMode\r\n    } = simulationData;\r\n    \r\n    let dataArray;\r\n\r\n    switch(visualizationMode) {\r\n        case 'pressure': dataArray = pressure; break;\r\n        case 'temperature': dataArray = temperature; break;\r\n        case 'density': dataArray = density; break;\r\n        case 'velocity':\r\n            dataArray = Array.from({ length: rows }, (_, row) =>\r\n                Array.from({ length: cols }, (_, col) => {\r\n                    if (!simulationData.velocityX[row]) {\r\n                        console.error(`Row ${row} is undefined in velocityX`);\r\n                        return [0, 0, 0, 255]; // Return default color\r\n                    }\r\n                    const vx = velocityX[row][col] || 0;\r\n                    const vy = velocityY[row][col] || 0;\r\n                    return Math.sqrt(vx * vx + vy * vy);\r\n                })\r\n            );\r\n            break;\r\n        default: dataArray = pressure;\r\n    }\r\n\r\n    //min/max from inside domain only\r\n    const flatData = [];\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (isInside[row][col] && !isBoundary[row][col]) {\r\n                const val = dataArray[row][col];\r\n                if (!isNaN(val) && isFinite(val)) {\r\n                    flatData.push(val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (flatData.length === 0) return;\r\n\r\n    const minVal = Math.min(...flatData);\r\n    const maxVal = Math.max(...flatData);\r\n    const avgVal = flatData.reduce((a, b) => a + b, 0) / flatData.length;\r\n\r\n    currentStats = { min: minVal, avg: avgVal, max: maxVal };\r\n\r\n    updateStatsDisplay(minVal, maxVal, avgVal);\r\n\r\n    if (callbacks?.onStatsUpdate) {\r\n        callbacks.onStatsUpdate({ \r\n            min: minVal, \r\n            max: maxVal, \r\n            avg: avgVal \r\n        });\r\n    }\r\n\r\n    //enable antialiasing \r\n    ctx.imageSmoothingEnabled = true;\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (!isInside[row][col]) continue;\r\n\r\n            const value  =dataArray[row][col];\r\n            const color = getColorFromValue(value, minVal, maxVal, visualizationMode);\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(col * cellWidth, row * cellHeight, cellWidth, cellHeight);\r\n        }\r\n    }\r\n    //update colorbar\r\n    createColorbar(minVal, maxVal, visualizationMode);\r\n}\r\n\r\nfunction updateStatsDisplay(minVal, maxVal, avgVal) {\r\n    const minElement = document.getElementById('min-label');\r\n    const avgElement = document.getElementById('avg-label');    \r\n    const maxElement = document.getElementById('max-label');\r\n    \r\n    if (minElement) minElement.textContent = minVal.toFixed(3);\r\n    if (avgElement) avgElement.textContent = avgVal.toFixed(3);\r\n    if (maxElement) maxElement.textContent = maxVal.toFixed(3);\r\n}\r\n\r\n//color mapping\r\n\r\nexport function getColorFromValue(value, minVal, maxVal, mode) {\r\n    if (!isFinite(value)) value = minVal;\r\n    \r\n    let normalized = 0;\r\n    if (maxVal > minVal) {\r\n        normalized = Math.max(0, Math.min(1, (value - minVal) / (maxVal - minVal)));  \r\n    }\r\n\r\n    let r, g, b;\r\n\r\n    switch(mode) {\r\n        case 'velocity':\r\n            // blue - cyan - green - yellow - red\r\n            if (normalized < 0.25) {\r\n                const t = normalized / 0.25;\r\n                r = 0; g = Math.floor(t * 255); b = 255;\r\n            } else if (normalized < 0.5) {\r\n                const t = (normalized - 0.25) / 0.25;\r\n                r = 0; g = 255; b = Math.floor(255 * (1 - t));\r\n            } else if (normalized < 0.75) {\r\n                const t = (normalized - 0.5) / 0.25;\r\n                r = Math.floor(t * 255); g = 255; b = 0;\r\n            } else {\r\n                const t = (normalized - 0.75) / 0.25;\r\n                r = 255; g = Math.floor(255 * (1 - t)); b = 0;\r\n            }\r\n            break;\r\n        case 'pressure':\r\n        case 'temperature':\r\n        case 'density':\r\n            r = Math.floor(normalized * 255);\r\n            g = 0;\r\n            b = Math.floor((1 - normalized) * 255);\r\n            break;\r\n        default:\r\n            r = Math.floor(normalized * 255);\r\n            g = Math.floor(normalized * 128);\r\n            b = Math.floor((1 - normalized) * 255);\r\n    }\r\n\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n\r\nexport function createColorbar(minVal, maxVal, mode) {\r\n    const colorbarCanvas = document.getElementById('colorbar');\r\n    if (!colorbarCanvas) return;\r\n\r\n    const colorbarCtx = colorbarCanvas.getContext('2d');\r\n    const height = colorbarCanvas.height;\r\n    const width = colorbarCanvas.width;\r\n\r\n    colorbarCtx.clearRect(0, 0, width, height);\r\n\r\n    const gradient = colorbarCtx.createLinearGradient(0,height,0,0);\r\n\r\n    const steps = 20;\r\n    for (let i = 0; i <= steps; i++) {\r\n        const ratio = i / steps;\r\n        const value = minVal + ratio * (maxVal - minVal);\r\n        const color = getColorFromValue(value, minVal, maxVal, mode);\r\n        gradient.addColorStop(ratio, color);\r\n    }\r\n\r\n    colorbarCtx.fillStyle = gradient;\r\n    colorbarCtx.fillRect(0, 0, width, height);\r\n\r\n    colorbarCtx.strokeStyle = '#ccc';\r\n    colorbarCtx.lineWidth = 1;\r\n    colorbarCtx.strokeRect(0, 0, width, height);\r\n\r\n    const maxLabel = document.getElementById('max-label');\r\n    const midLabel = document.getElementById('mid-label');\r\n    const minLabel = document.getElementById('min-label');\r\n    const titleLabel = document.getElementById('colorbar-title');\r\n\r\n    if (maxLabel) maxLabel.textContent = maxVal.toFixed(3);\r\n    if (midLabel) midLabel.textContent = ((maxVal + minVal) / 2).toFixed(3);\r\n    if (minLabel) minLabel.textContent = minVal.toFixed(3);\r\n\r\n    const titles = {\r\n        'velocity': 'Velocity',\r\n        'pressure': 'Pressure',\r\n        'temperature': 'Temperature',\r\n        'density': 'Density'\r\n    };\r\n    if (titleLabel) titleLabel.textContent = titles[mode] || 'Value';\r\n}\r\n  \r\n//convergence chart\r\n\r\nexport function drawConvergenceChart(canvas) {\r\n    if (!canvas) return; // safety check\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.fillStyle = 'rgba(0,0,0,0.8)';\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    if (convergenceHistory.velocity.length < 2) return;\r\n\r\n    //find range for logarithmic scale\r\n    const allValues = [\r\n        ...convergenceHistory.velocity, \r\n        ...convergenceHistory.pressure, \r\n        ...convergenceHistory.mass\r\n    ];\r\n    const minVal = Math.max(1e-12, Math.min(...allValues));\r\n    const maxVal = Math.max(minVal * 1.01, Math.max(...allValues));\r\n\r\n    const logMin = Math.log10(minVal);\r\n    const logMax = Math.log10(maxVal);\r\n    const logRange = logMax - logMin;\r\n\r\n    if (logRange <= 0) return;\r\n\r\n    // Draw Grid\r\n    drawChartGrid(ctx, width, height, logMin, logMax, logRange);\r\n    drawConvergenceLines(ctx, width, height, logMin, logRange);\r\n    drawConvergenceLabels(ctx, width, height, logMin, logRange);\r\n}\r\n\r\nfunction drawChartGrid(ctx, width, height, logMin, logMax, logRange) {\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.2)';\r\n    ctx.lineWidth = 1;\r\n\r\n    //horizontal grid lines (power of 10)\r\n    for (let power = Math.floor(logMin); power <= Math.ceil(logMax); power++) {\r\n        const y = height - ((power - logMin) / logRange) * height;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(width, y);\r\n        ctx.stroke();\r\n\r\n        //labels\r\n        ctx.fillStyle = 'rgba(255,255,255,0.7)';\r\n        ctx.font = '10px Arial';\r\n        ctx.fillText(`1e${power}`, 5, y - 2);\r\n    }\r\n\r\n    //Vertical grid lines\r\n    const stepSize = Math.max(1, Math.floor(convergenceHistory.velocity.length / 5));\r\n\r\n    for (let i = 0; i < convergenceHistory.velocity.length; i += stepSize) {\r\n        const x = convergenceHistory.velocity.length > 1 \r\n            ? (i / (convergenceHistory.velocity.length - 1)) * width\r\n            : 0;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, height);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nfunction drawConvergenceLines(ctx, width, height, logMin, logRange) {\r\n    const datasets = [\r\n        { data: convergenceHistory.velocity, color: 'blue', label: 'Velocity' },\r\n        { data: convergenceHistory.pressure, color: 'green', label: 'Pressure' },\r\n        { data: convergenceHistory.mass, color: 'red', label: 'Mass' }\r\n    ];\r\n\r\n    datasets.forEach(dataset => {\r\n        if (dataset.data.length < 2) return;\r\n\r\n        ctx.strokeStyle = dataset.color;\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < dataset.data.length; i++) {\r\n            const x = (i / (dataset.data.length - 1)) * width;\r\n            const logValue = Math.log10(Math.max(1e-12, dataset.data[i]));\r\n            const y = height - ((logValue - logMin) / logRange) * height;\r\n\r\n            if (i === 0) {\r\n                ctx.moveTo(x, y);\r\n            } else {\r\n                ctx.lineTo(x, y);\r\n            }\r\n        }\r\n\r\n        ctx.stroke();\r\n    });\r\n}\r\n\r\nfunction drawToleranceLines(ctx, width, height, logMin, logRange) {\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.7)';\r\n    ctx.lineWidth = 1;\r\n    ctx.setLineDash([5, 5]);\r\n\r\n    const tolerances = [\r\n        convergenceTolerances.velocity,\r\n        convergenceTolerances.pressure, \r\n        convergenceTolerances.mass\r\n    ];\r\n\r\n    tolerances.forEach((tol) => {\r\n        if (tol <= 0) return;\r\n        const logTol = Math.log10(tol);\r\n        const y = height - ((logTol - logMin) / logRange) * height;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(width, y);\r\n        ctx.stroke();\r\n    });\r\n\r\n    ctx.setLineDash([]);\r\n}\r\n\r\n//export current stats\r\nexport function getCurrentStats() {\r\n    return currentStats;\r\n}\r\n","//ui.js - ui controls and event handling\r\n\r\nimport {simulation, getAnimationId, setAnimationId, setConvergenceTolerance, getSimulationData, getCallbacks} from './core.js';\r\nimport { updateFlowStabilized, getLatestResiduals } from \"./physics.js\";\r\nimport { visualizeFlow, createNozzleGeometry, drawConvergenceChart } from \"./rendering.js\"; \r\n\r\n//simulation status updates\r\n\r\nexport function updateSimulationStatus(status) {\r\n    simulation.state = status;\r\n    const statusElement = document.getElementById('simulation-status');\r\n    const indicatorElement = document.getElementById('status-indicator');\r\n    const startBtn = document.getElementById('start-btn');\r\n    const pauseBtn = document.getElementById('pause-btn');\r\n\r\n    //skip DOM updates is elements not found (for testing)\r\n    if (!statusElement || !indicatorElement || !startBtn || !pauseBtn) {\r\n        console.log('Status updated to: ', status, '(DOM elements not found)');\r\n        return;\r\n    }\r\n    \r\n    const statusMap = {\r\n        'running': { text: 'Running', class: 'status-indicator status-running', startDisabled: true, pauseDisabled: false },\r\n        'paused': { text: 'Paused', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'converged': { text: 'Converged', class: 'status-indicator status-converged', startDisabled: false, pauseDisabled: true },\r\n        'stopped': { text: 'Ready', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'ready': { text: 'Ready', class: 'status-indicator status-paused', startDisabled: false, pauseDisabled: true },\r\n        'error': { text: 'Error', class: 'status-indicator status-error', startDisabled: true, pauseDisabled: true }\r\n    };\r\n\r\n    const config = statusMap[status.toLowerCase()];\r\n    if(!config) {\r\n        console.warm('Unknown status:', status);\r\n        return;\r\n    }\r\n\r\n    statusElement.textContent = config.text;\r\n    indicatorElement.className = config.class;\r\n    startBtn.disabled = config.startDisabled;\r\n    pauseBtn.disabled = config.pauseDisabled;\r\n\r\n    console.log('Status updated to:', config.text);\r\n}\r\n\r\nexport function updateConvergenceDisplay(residuals) {\r\n    const timeStepElement = document.getElementById('time-step');\r\n    const totalIterationsElement = document.getElementById('total-iterations');\r\n    const velocityResidualElement = document.getElementById('velocity-residual');\r\n    const pressureResidualElement = document.getElementById('pressure-residual');\r\n    const massResidualElement = document.getElementById('mass-residual');\r\n\r\n    if (timeStepElement) timeStepElement.textContent = simulation.timeStep;\r\n    if (totalIterationsElement) totalIterationsElement.textContent = simulation.totalIterations;\r\n    if (velocityResidualElement) velocityResidualElement.textContent = residuals.velocity.toExponential(3);\r\n    if (pressureResidualElement) pressureResidualElement.textContent = residuals.pressure.toExponential(3);\r\n    if (massResidualElement) massResidualElement.textContent = residuals.mass.toExponential(3);\r\n\r\n    const callbacks = getCallbacks();\r\n    if (callbacks?.onConvergenceUpdate) {\r\n        callbacks.onConvergenceUpdate({\r\n            timeStep: simulation.timeStep,\r\n            totalIterations: simulation.totalIterations,\r\n            velocityResidual: residuals.velocity.toExponential(3),\r\n            pressureResidual: residuals.pressure.toExponential(3),\r\n            massResidual: residuals.mass.toExponential(3),\r\n        });\r\n    }\r\n\r\n    const convergenceCanvas = document.getElementById('convergence-canvas');\r\n    if (convergenceCanvas) {\r\n        drawConvergenceChart(convergenceCanvas);\r\n    }\r\n}\r\n\r\n//tolerance controls\r\n\r\nexport function updateTolerances() {\r\n    const velToleranceInput = document.getElementById('vel-tolerance');\r\n    const pressToleranceInput = document.getElementById('press-tolerance');\r\n    const massToleranceInput = document.getElementById('mass-tolerance');\r\n\r\n    if (velToleranceInput) {\r\n        const value = parseFloat(velToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('velocity', value);\r\n    }\r\n\r\n    if (pressToleranceInput) {\r\n        const value = parseFloat(pressToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('pressure', value);\r\n    }\r\n\r\n    if (massToleranceInput) {\r\n        const value = parseFloat(massToleranceInput.value) || 1e-6;\r\n        setConvergenceTolerance('mass', value);\r\n    }\r\n\r\n}\r\n\r\nexport function setupToleranceControls() {\r\n    const toleranceIds = ['vel-tolerance', 'press-tolerance', 'mass-tolerance'];\r\n\r\n    toleranceIds.forEach((id) => {\r\n        const input = document.getElementById(id);\r\n        if (input) {\r\n            input.addEventListener('change', updateTolerances);\r\n            input.addEventListener('input', updateTolerances); //real-time updates\r\n        }\r\n    });\r\n}\r\n\r\n//animation loop\r\n\r\nexport function startAnimationLoop(canvas, simulationData, callbacks) {\r\n    console.log('Stating animation loop...');\r\n\r\n    const animate = () => {\r\n        if (simulation.state !== 'running') {\r\n            console.log('Animation loop stopped - simulation not running');\r\n            return;\r\n        }\r\n\r\n        if (!simulationData) {\r\n            console.error('Simulation data not available for animation');\r\n            return;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n            console.error('Failed to get canvas context');\r\n            return;\r\n        }\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (simulation.timeStep % 2 === 0) {\r\n            updateTolerances();\r\n\r\n            let shouldContinue;\r\n            try {\r\n                shouldContinue = updateFlowStabilized(simulationData);\r\n            } catch (error) {\r\n                console.error('Error updating flow: ', error);\r\n                simulation.state = 'error';\r\n                updateSimulationStatus('error');\r\n                return;\r\n            }\r\n\r\n            //update convergence display\r\n            try {\r\n                const residuals = getLatestResiduals(simulationData);\r\n                updateConvergenceDisplay(residuals);\r\n            } catch (error) {\r\n                console.error('Error updating convergence display: ', error);\r\n            }\r\n\r\n            if (!shouldContinue) {\r\n                //simulation converged or failed\r\n                const animationId = getAnimationId();\r\n                if(animationId !== null) {\r\n                    cancelAnimationFrame(animationId);\r\n                    setAnimationId(null);\r\n                }\r\n                simulation.state = 'converged';\r\n                updateSimulationStatus('converged');\r\n\r\n                renderFinalState(ctx, simulationData, callbacks);\r\n                return;\r\n            }\r\n        }\r\n\r\n        simulation.timeStep++;\r\n\r\n        try {\r\n            renderCurrentFrame(ctx, simulationData, callbacks);\r\n        } catch (error) {\r\n            console.error('Error rendering frame: ', error);\r\n        }\r\n\r\n        const newAnimationId = requestAnimationFrame(animate);\r\n        setAnimationId(newAnimationId);\r\n    };\r\n\r\n    const animationId = requestAnimationFrame(animate);\r\n    setAnimationId(animationId);\r\n}\r\n\r\nexport function stopAnimationLoop() {\r\n    const animationId = getAnimationId();\r\n    if(animationId !== null) {\r\n        cancelAnimationFrame(animationId);\r\n        setAnimationId(null);\r\n        console.log('Animation loop stopped');\r\n    }\r\n}\r\n\r\nfunction renderCurrentFrame(ctx, simulationData, callbacks) {\r\n    visualizeFlow(ctx, simulationData, callbacks);\r\n    createNozzleGeometry(ctx, simulationData);\r\n}\r\n\r\nfunction renderFinalState(ctx, simulationData, callbacks) {\r\n    console.log('Rendering final convergeed state');\r\n    renderCurrentFrame(ctx, simulationData, callbacks);\r\n}\r\n\r\n//event handlers setup\r\n\r\nlet controlHandlers = null;\r\n\r\nexport function setupControlButtons(simulationControl) {\r\n    const startBtn = document.getElementById('start-btn');\r\n    const pauseBtn = document.getElementById('pause-btn');\r\n    const resetBtn = document.getElementById('reset-btn');\r\n\r\n    //store handlers to prevent multiple bindings\r\n    controlHandlers = {\r\n        start: () => {\r\n            console.log('Start button clicked');\r\n            if (simulationControl?.start) {\r\n                simulationControl.start();\r\n            }\r\n        },\r\n        pause: () => {\r\n            console.log('Pause button clicked');\r\n            if (simulationControl?.pause) {\r\n                simulationControl.pause();\r\n            }\r\n        },\r\n        reset: () => {\r\n            console.log('Reset button clicked');\r\n            if (simulationControl?.reset) {\r\n                simulationControl.reset();\r\n            }\r\n        }\r\n    };\r\n\r\n    if (startBtn) {\r\n        startBtn.removeEventListener('click', controlHandlers.start); //remove existing\r\n        startBtn.addEventListener('click', controlHandlers.start);\r\n    }\r\n    if (pauseBtn) {\r\n        pauseBtn.removeEventListener('click', controlHandlers.pause);\r\n        pauseBtn.addEventListener('click', controlHandlers.pause);\r\n    }\r\n    if (resetBtn) {\r\n        resetBtn.removeEventListener('click', controlHandlers.reset);\r\n        resetBtn.addEventListener('click', controlHandlers.reset);\r\n    }\r\n\r\n    console.log('Control buttons setup complete');\r\n}\r\n\r\nexport function setupVisualizationModeControls() {\r\n    const radios = document.querySelectorAll('input[name=\"vizMode\"]');\r\n\r\n    radios.forEach((radio) => {\r\n        radio.addEventListener('change', (e) => {\r\n            const simulationData = getSimulationData();\r\n            if (simulationData) {\r\n                simulationData.visualizationMode = e.target.value;\r\n\r\n                //immediately update visualization\r\n                const canvas = document.getElementById('fea-canvas');\r\n                if (canvas) {\r\n                    const ctx = canvas.getContext('2d');\r\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                    renderCurrentFrame(ctx, simulationData, getCallbacks());\r\n                }\r\n\r\n                console.log('Visualization mode changed to: ', e.target.value);\r\n            }\r\n        });\r\n    });  \r\n}\r\n\r\n//resize handling\r\n\r\nexport function setupResize(canvas) {\r\n    let resizeTimeout;\r\n\r\n    const handleResize = () => {\r\n        clearTimeout(resizeTimeout);\r\n        resizeTimeout = setTimeout(() => {\r\n            console.log('Handling resize');\r\n            //resize logic goes here (FIX)\r\n        }, 150);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    //return cleanup function\r\n    return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n        clearTimeout(resizeTimeout);\r\n    };\r\n}\r\n\r\n//initialization helpers\r\n\r\nexport function initializeUI(simulationControl) {\r\n    console.log('Initializing UI controls...');\r\n\r\n    try {\r\n        setupVisualizationModeControls();\r\n        setupToleranceControls();\r\n        setupControlButtons(simulationControl);\r\n        console.log('UI initialization complete');\r\n    } catch (error) {\r\n        console.error('Error initializing UI: ', error);\r\n    }\r\n}","//import { update } from \"three/examples/jsm/libs/tween.module.js\";\r\nimport { createFlowDomain } from \"./geometry.js\";\r\nimport { initializeFlow, updateFlowStabilized } from \"./physics.js\";\r\nimport { visualizeFlow, createNozzleGeometry } from \"./rendering.js\";\r\nimport { startAnimationLoop, stopAnimationLoop, updateSimulationStatus } from \"./ui.js\";\r\n\r\n//simulation state management\r\n\r\nexport const simulation = { \r\n    state: 'stopped',\r\n    timeStep: 0,\r\n    totalIterations: 0,\r\n    animationId: null,\r\n};\r\n\r\nlet _animationId = null;\r\nexport function setAnimationId(id) { _animationId = id; }\r\nexport function getAnimationId() { return _animationId; }\r\n\r\n//convergence tracking\r\nexport const convergenceHistory = {\r\n    velocity: [],\r\n    pressure: [],\r\n    mass: [],\r\n    maxHistory: 200\r\n};\r\n\r\nexport let convergenceTolerances = {\r\n    velocity: 1e-6,\r\n    pressure: 1e-6,\r\n    mass: 1e-6\r\n};\r\n\r\n//global sim data container\r\nlet simulationData = null;\r\nlet callbacks = null;\r\n\r\n//initialization\r\nexport function initFEA(canvas, inputSimulationData) {\r\n    console.log('=== FEA initialization starting ===');\r\n\r\n    if (!canvas) {\r\n        console.error('Canvas is null or undefined');\r\n        return null;\r\n    };\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        console.error('Could not get canvas context');\r\n        return null;\r\n    };\r\n\r\n    simulationData = inputSimulationData.current;\r\n\r\n    console.log('Canvas Dimensions: ', canvas.width, 'x', canvas.height);\r\n    console.log('Simulation Data: ', simulationData);\r\n\r\n    //clear canvas and show test\r\n    ctx.fillStyle = 'red';\r\n    ctx.fillRect(10, 10, 50, 50);\r\n    console.log('Red test square drawn at (10,10)');\r\n\r\n    //initialize after a short delay\r\n    setTimeout(() => {\r\n        try {\r\n            initializeSimulation(canvas, ctx);\r\n            console.log('=== FEA initialization complete ===');\r\n        } catch (error) {\r\n            console.error('Failed to initialize FEA: ', error);\r\n            updateSimulationStatus('error');\r\n        }\r\n    }, 100);\r\n\r\n    return createSimulationControl(canvas);\r\n}\r\n\r\nfunction initializeSimulation(canvas, ctx) {\r\n    ctx.clearRect(0,0, canvas.width, canvas.height);\r\n\r\n    //setup canvas dims in simualtion data\r\n    setupCanvasDimensions(canvas);\r\n\r\n    //create geometry\r\n    console.log('Creating flow domain...');\r\n    createFlowDomain(simulationData);\r\n    console.log('Flow domain created. isInside length: ', simulationData.isInside?.length);\r\n    \r\n    initializeFlowArrays();\r\n\r\n    createTestData();\r\n\r\n    renderCurrentState(ctx);\r\n\r\n    updateSimulationStatus('ready');\r\n}\r\n\r\nfunction setupCanvasDimensions(canvas) {\r\n    simulationData.canvasWidth = canvas.width;\r\n    simulationData.canvasHeight = canvas.height;\r\n    simulationData.cellWidth = simulationData.canvasWidth / simulationData.cols;\r\n    simulationData.cellHeight = simulationData.canvasHeight / simulationData.rows;\r\n}\r\n\r\nfunction initializeFlowArrays() {\r\n    const { rows, cols } = simulationData;\r\n\r\n    //force re-initialization even if arrays already exist\r\n    simulationData.velocityX = [];\r\n    simulationData.velocityY = [];\r\n    simulationData.pressure = [];\r\n    simulationData.temperature = [];\r\n    simulationData.density = [];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        simulationData.velocityX[row] = new Array(cols).fill(0);\r\n        simulationData.velocityY[row] = new Array(cols).fill(0);\r\n        simulationData.pressure[row] = new Array(cols).fill(101325);\r\n        simulationData.temperature[row] = new Array(cols).fill(300);\r\n        simulationData.density[row] = new Array(cols).fill(1.225);\r\n    }\r\n}\r\n\r\nfunction createTestData() {\r\n    const { rows, cols, isInside } = simulationData;\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (isInside && isInside[row] && isInside[row][col]) {\r\n                const progress = col / (cols - 1);\r\n                simulationData.velocityX[row][col] = 50 + progress * 100;\r\n                simulationData.velocityY[row][col] = Math.sin(progress * Math.PI) * 5;\r\n                simulationData.pressure[row][col] = 101325 + (1 - progress * 0.3);\r\n                simulationData.temperature[row][col] = 300 - progress * 50;\r\n                simulationData.density[row][col] = 1.225 * (1 - progress * 0.2);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderCurrentState(ctx) {\r\n    try {\r\n        createNozzleGeometry(ctx, simulationData);\r\n\r\n        visualizeFlow(ctx, simulationData, callbacks);\r\n\r\n        console.log('Initial rendering complete');\r\n    } catch (error) {\r\n        console.error('Error rendering initial state: ', error);\r\n    }\r\n}\r\n\r\n//simulation control interface\r\n\r\nfunction createSimulationControl(canvas) {\r\n    return {\r\n        start: () => startSimulation(canvas),\r\n        pause: () => pauseSimulation(),\r\n        reset: () => resetSimulation(canvas),\r\n        setTolerance: (type, value) => setTolerance(type, value),\r\n        setCallbacks: (newCallbacks) => setCallbacks(newCallbacks),\r\n        updateVisualization: () => updateVisualization(canvas),\r\n        cleanup: () => cleanupSimulation()\r\n    };\r\n}\r\n\r\nfunction startSimulation(canvas) {\r\n    console.log('Starting simulation...');\r\n    simulation.state = 'running';\r\n    updateSimulationStatus('running');\r\n\r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('running');\r\n    }\r\n\r\n    startAnimationLoop(canvas, simulationData, callbacks);\r\n}\r\n\r\nfunction pauseSimulation() {\r\n    console.log('Pausing simulation...');\r\n    simulation.state = 'paused';\r\n    updateSimulationStatus('paused');\r\n\r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('paused');\r\n    }\r\n\r\n    stopAnimationLoop();\r\n}\r\n\r\nfunction resetSimulation(canvas) {\r\n    console.log('Resetting simulation...');\r\n\r\n    stopAnimationLoop();\r\n\r\n    simulation.state = 'stopped';\r\n    simulation.timeStep = 0;\r\n    simulation.totalIterations = 0;\r\n\r\n    //clear conv hist\r\n    convergenceHistory.velocity = [];\r\n    convergenceHistory.pressure = [];\r\n    convergenceHistory.mass = [];\r\n\r\n    //reset flow arrays -> reinitialize flow\r\n    initializeFlowArrays();\r\n\r\n    try {\r\n        initializeFlow(simulationData);\r\n        createTestData();\r\n    } catch (error) {\r\n        console.log('Error reinitializing flow: ', error);\r\n    }\r\n\r\n    updateSimulationStatus('ready');\r\n    \r\n    if (callbacks?.onStatusUpdate) {\r\n        callbacks.onStatusUpdate('ready');\r\n    }\r\n\r\n    if (callbacks?.onConvergenceUpdate) {\r\n        callbacks.onConvergenceUpdate({\r\n            timeStep: 0,\r\n            totalIterations: 0,\r\n            velocityResidual: '-',\r\n            pressureResidual: '-',\r\n            massResidual: '-',\r\n        });\r\n    }\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    renderCurrentState(ctx);\r\n}\r\n\r\nfunction setTolerance(type, value) {\r\n    console.log(`Setting ${type} tolerance to ${value}`);\r\n    if (type in convergenceTolerances) {\r\n        convergenceTolerances[type] = value;\r\n    }\r\n}\r\n\r\nfunction setCallbacks(newCallbacks) {\r\n    callbacks = newCallbacks;\r\n    console.log('Callbacks set: ', Object.keys(callbacks || {}));\r\n}\r\n\r\nfunction updateVisualization(canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    renderCurrentState(ctx);\r\n}\r\n\r\nfunction cleanupSimulation() {\r\n    console.log('Cleaning up simulation...');\r\n    simulation.state = 'stopped';\r\n    stopAnimationLoop();\r\n}\r\n\r\n//export getters for other files\r\n\r\nexport function getSimulationData() {\r\n    return simulationData;\r\n}\r\n\r\nexport function getCallbacks() {\r\n    return callbacks;\r\n}\r\n\r\nexport function setConvergenceTolerance(type, value) {\r\n    if (type in convergenceTolerances) {\r\n        convergenceTolerances[type] = value;\r\n    }\r\n}","import '../styles.css';\r\nimport Banner from '../components/Banner/banner.jsx';\r\nimport { useRef, useEffect, useState, useCallback } from 'react';\r\nimport { initFEA } from './FEA/core.js';\r\nimport { initializeUI } from './FEA/ui.js';\r\nimport { setupCanvas, drawConvergenceChart } from './FEA/rendering.js';\r\n\r\nexport default function FEA() {\r\n    const convergenceCanvasRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const colorbarRef = useRef(null);\r\n    const [simulationStatus, setSimulationStatus] = useState('Initializing');\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [visualizationMode, setVisualizationMode] = useState('velocity');\r\n    const [stats, setStats] = useState({ min : 0, avg: 0, max: 0});\r\n    const [convergenceData, setConvergenceData] = useState({\r\n        timeStep: 0,\r\n        totalIterations: 0,\r\n        velocityResidual: '-',\r\n        pressureResidual: '-',\r\n        massResidual: '-',\r\n    });\r\n\r\n    const simulationRef = useRef(null);\r\n    const simulationControlRef = useRef(null);\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n    const [canvasDimensions, setCanvasDimensions] = useState({ width: 800, height: 400 });\r\n    \r\n    const getStatusClass = (status) => {\r\n    switch (status.toLowerCase()) {\r\n        case 'running': return 'running';\r\n        case 'paused': return 'paused';\r\n        case 'ready': return 'ready';\r\n        case 'error': return 'error';\r\n        default: return 'unknown';\r\n    }\r\n    };\r\n\r\n    const simulationData = useRef({\r\n        controlPoints: {\r\n            inlet_radius: 20,\r\n            inlet_length: 50,\r\n            cp1x: 60, cp1y: 25,\r\n            cp2x: 100, cp2y: 40,\r\n            cp3x: 150, cp3y: 60,\r\n            throat_x: 90, throat_radius: 15,\r\n            switcher_x: 120, switcher_y: 35,\r\n            exit_x: 200, exit_radius: 30,\r\n        },\r\n        scaleY: 2,\r\n        rows: 100,\r\n        cols: 200,\r\n        cellWidth: 5,\r\n        cellHeight: 5,\r\n        canvasHeight: 500,\r\n        visualizationMode: visualizationMode,\r\n        velocityX: [],\r\n        velocityY: [],\r\n        pressure: [],\r\n        temperature: [],\r\n        density: [],\r\n        isInside: [],\r\n        isBoundary: [],\r\n        // wallAngleTop: [],\r\n        // wallAngleBottom: [],\r\n    });\r\n\r\n    //responsive canvas sizing\r\n    const updateCanvasSize = useCallback(() => {\r\n        const container = canvasRef.current?.parentElement;\r\n        if (container) {\r\n            const containerWidth = container.clientWidth - 120; // for colorbar\r\n            const maxWidth = 800;\r\n            const maxHeight = 400;\r\n\r\n            let width = Math.min(containerWidth, maxWidth);\r\n            let height = (width / maxWidth) * maxHeight;\r\n\r\n            //ensure minimum size\r\n            if (width < 600) {\r\n                width = 600;\r\n                height = 300;\r\n            }\r\n\r\n            setCanvasDimensions({ width, height });\r\n        }\r\n    }, []);\r\n\r\n    // Update canvas dimensions on window resize\r\n    useEffect(() => {\r\n        updateCanvasSize();\r\n        window.addEventListener('resize', updateCanvasSize);\r\n        return () => window.removeEventListener('resize', updateCanvasSize);\r\n    }, [updateCanvasSize]);\r\n\r\n    // Update canvas actual size when dimensions change\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            canvasRef.current.width = canvasDimensions.width;\r\n            canvasRef.current.height = canvasDimensions.height;\r\n            canvasRef.current.style.width = `${canvasDimensions.width}px`;\r\n            canvasRef.current.style.height = `${canvasDimensions.height}px`;\r\n        }\r\n    }, [canvasDimensions]);\r\n\r\n    //update visualization mode in simulation data when changed\r\n    useEffect(() => {\r\n        if (isInitialized && simulationData.current) {\r\n            simulationData.current.visualizationMode = visualizationMode;\r\n        }\r\n    }, [visualizationMode, isInitialized]);\r\n\r\n    const handleStart = useCallback(() => {\r\n        if (simulationControlRef.current?.start) {\r\n            simulationControlRef.current.start();\r\n            setIsRunning(true);\r\n            setSimulationStatus('Running');\r\n        }\r\n    }, []);\r\n\r\n    const handlePause = useCallback(() => {\r\n        if (simulationControlRef.current?.pause) {\r\n            simulationControlRef.current.pause();\r\n            setIsRunning(false);\r\n            setSimulationStatus('Paused');\r\n        }\r\n    }, []);\r\n\r\n    const handleReset = useCallback(() => {\r\n        if (simulationControlRef.current?.reset) {\r\n            simulationControlRef.current.reset();\r\n            setIsRunning(false);\r\n            setSimulationStatus('Reset');\r\n            setStats({ min : 0, avg: 0, max: 0});\r\n            setConvergenceData({\r\n                timeStep: 0,\r\n                totalIterations: 0,\r\n                velocityResidual: '-',\r\n                pressureResidual: '-',\r\n                massResidual: '-',\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const handleToleranceChange = useCallback((type, value) => {\r\n        if (simulationControlRef.current?.setTolerance) {\r\n            simulationControlRef.current.setTolerance(type, parseFloat(value));\r\n        }\r\n    }, []);\r\n\r\n    //main initialization effect\r\n    useEffect(() => {\r\n        let timeoutId;\r\n\r\n        const initializeSimulation = () => {\r\n            console.log('Initializing FEA simulation...');\r\n            console.log('Canvas ref:', canvasRef.current);\r\n            console.log('Simulation data:', simulationData.current);\r\n    \r\n            if (!canvasRef.current) {\r\n                console.log('Canvas not ready yet, retrying');\r\n                timeoutId = setTimeout(initializeSimulation, 100);\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                console.log('Canvas is ready, initializing FEA...');\r\n                \r\n                //setup canvas dims\r\n                setupCanvas(\r\n                    canvasRef.current,\r\n                    document.getElementById('colorbar'),\r\n                    convergenceCanvasRef.current\r\n                );\r\n\r\n                simulationData.current.canvasHeight = canvasDimensions.height;\r\n\r\n                simulationControlRef.current = initFEA(canvasRef.current, simulationData);\r\n    \r\n                if (simulationControlRef.current) {\r\n                    //callbacks for React state updates\r\n                    simulationControlRef.current.setCallbacks({\r\n                        onStatusUpdate: setSimulationStatus,\r\n                        onStatsUpdate: setStats,\r\n                        onConvergenceUpdate: setConvergenceData\r\n                    });\r\n\r\n                    initializeUI(simulationControlRef.current);\r\n\r\n                    setIsInitialized(true);\r\n                    setSimulationStatus('Ready');\r\n                    console.log('FEA initialization successful');\r\n                } else {\r\n                    console.error('Failed to get simulation control interface');\r\n                    setSimulationStatus('Error');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error initializing FEA:', error);\r\n                setSimulationStatus('Error');\r\n            }\r\n        };\r\n\r\n        timeoutId = setTimeout(initializeSimulation, 200);\r\n\r\n        //initialize convergence chart\r\n        const initChart = () => {\r\n            if (convergenceCanvasRef.current) {\r\n                try {\r\n                    drawConvergenceChart(convergenceCanvasRef.current);\r\n                } catch (error) {\r\n                    console.error('Failed to draw initial convergence chart', error);\r\n                }\r\n            }\r\n        };\r\n        setTimeout(initChart, 300);\r\n\r\n        //cleanup fn\r\n        return () => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (simulationControlRef.current?.cleanup) {\r\n                simulationControlRef.current.cleanup();\r\n            }\r\n        }\r\n    \r\n    }, [canvasDimensions]);\r\n\r\n    const handleVisualizationModeChange = useCallback((e) => {\r\n        setVisualizationMode(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Banner />\r\n            <div className=\"title\">\r\n                <h1>FEA Nozzle Simulator</h1>\r\n            </div>\r\n            <div className=\"main-layout\">\r\n                <div className=\"left-section\">\r\n                    <div className=\"canvas-area\">\r\n                        <canvas \r\n                            ref={canvasRef} \r\n                            id=\"fea-canvas\" \r\n                            width=\"1000\" \r\n                            height=\"500\"\r\n                            style={{\r\n                                width: `${canvasDimensions.width}px`,\r\n                                height: `${canvasDimensions.height}px`\r\n                            }} \r\n                        />\r\n                        <div className=\"colorbar-container\">\r\n                            <div id=\"colorbar-title\" className=\"colorbar-labels\">\r\n                                {visualizationMode.charAt(0).toUpperCase() + visualizationMode.slice(1)}\r\n                            </div>\r\n                            <div id=\"max-label\" className=\"colorbar-labels\">\r\n                                {stats.max.toFixed(3)}\r\n                            </div>\r\n                            <canvas \r\n                                ref={colorbarRef}\r\n                                id=\"colorbar\" \r\n                                width=\"30\" \r\n                                height=\"300\"\r\n                            />\r\n                            <div id=\"mid-label\" className=\"colorbar-labels\" style={{ position: 'absolute', marginTop: '150px' }}>\r\n                                {stats.avg.toFixed(3)}\r\n                            </div>\r\n                            <div id=\"min-label\" className=\"colorbar-labels\">\r\n                                {stats.min.toFixed(3)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"controls\">\r\n                        <strong>Visualization Mode:</strong>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"pressure\"\r\n                                checked={visualizationMode === 'pressure'}\r\n                                onChange={handleVisualizationModeChange} \r\n                            />\r\n                            Pressure\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"velocity\" \r\n                                checked={visualizationMode === 'velocity'} \r\n                                onChange={handleVisualizationModeChange}\r\n                            />\r\n                            Velocity\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"temperature\"\r\n                                checked={visualizationMode === 'temperature'}\r\n                                onChange={handleVisualizationModeChange} \r\n                            />\r\n                            Temperature\r\n                        </label>\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name=\"vizMode\" \r\n                                value=\"density\"\r\n                                checked={visualizationMode === 'density'}\r\n                                onChange={handleVisualizationModeChange}\r\n                            />\r\n                            Density\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"stats\">\r\n                        <div className=\"stat-item\">\r\n                            Min: <span id=\"min-value\" className=\"stat-value\">{stats.min.toFixed(2)}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            Avg: <span id=\"avg-value\" className=\"stat-value\">{stats.avg.toFixed(2)}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                            Max: <span id=\"max-value\" className=\"stat-value\">{stats.max.toFixed(2)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"right-section\">\r\n                    <div className=\"convergence-info\">\r\n                        <h3>Simulation Status</h3>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>\r\n                                <span  \r\n                                    className={`status-indicator ${getStatusClass(simulationStatus)}`} \r\n                                    id=\"status-indicator\"\r\n                                ></span>\r\n                            Status: \r\n                            </span>\r\n                            <span className=\"convergence-value\" id=\"simulation-status\">\r\n                                {simulationStatus}\r\n                            </span>\r\n                        </div>\r\n                         <div className=\"convergence-metric\">\r\n                            <span>Time Step:</span>\r\n                            <span className=\"convergence-value\" id=\"time-step\">\r\n                                {convergenceData.timeStep}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Iterations:</span>\r\n                            <span className=\"convergence-value\" id=\"total-iterations\">\r\n                                {convergenceData.totalIterations}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Velocity Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"velocity-residual\">\r\n                                {convergenceData.velocityResidual}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Pressure Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"pressure-residual\">\r\n                                {convergenceData.pressureResidual}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"convergence-metric\">\r\n                            <span>Mass Residual:</span>\r\n                            <span className=\"convergence-value\" id=\"mass-residual\">\r\n                                {convergenceData.massResidual}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"convergence-controls\">\r\n                        <h3>Controls</h3>\r\n                        <div style={{ textAlign: 'center', marginBottom: '15px' }}>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"start-btn\"\r\n                                onClick={handleStart}\r\n                                disabled={isRunning}\r\n                            >\r\n                                Start\r\n                            </button>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"pause-btn\" \r\n                                onClick={handlePause}\r\n                                disabled={!isRunning}\r\n                            >\r\n                                Pause\r\n                            </button>\r\n                            <button \r\n                                className=\"control-button\" \r\n                                id=\"reset-btn\"\r\n                                onClick={handleReset}\r\n                            >\r\n                                Reset\r\n                            </button>\r\n                        </div>\r\n                        <hr />\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"vel-tolerance\">Velocity Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"vel-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\"\r\n                                onChange={(e) => handleToleranceChange('velocity', e.target.value)} \r\n                            /> \r\n                        </div>\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"press-tolerance\">Pressure Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"press-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\" \r\n                                onChange={(e) => handleToleranceChange('pressure', e.target.value)}\r\n                            /> \r\n                        </div>\r\n                        <div style={{ margin: '10px 0' }}>\r\n                            <label htmlFor=\"mass-tolerance\">Mass Tolerance:</label>\r\n                            <input \r\n                                type=\"number\" \r\n                                className=\"tolerance-input\" \r\n                                id=\"mass-tolerance\" \r\n                                defaultValue=\"1e-6\" \r\n                                step=\"1e-7\" \r\n                                placeholder=\"1e-6\"\r\n                                onChange={(e) => handleToleranceChange('mass', e.target.value)} \r\n                            /> \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"convergence-canvas\">\r\n                        <h3>Convergence History</h3>\r\n                        <canvas \r\n                            ref={convergenceCanvasRef}\r\n                            id=\"convergence-canvas\" \r\n                            width=\"400\" \r\n                            height=\"250\"\r\n                        />\r\n                    </div>        \r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"names":["bezierQuadratic","t","p0","p1","p2","getWallY","x","top","controlPoints","scaleY","canvasHeight","cp","scaledY","calculateWallAngles","cols","cellWidth","wallAngleTop","wallAngleBottom","col","dx","y1_top","y1_bot","y2_top","y2_bot","createFlowDomain","simulationData","rows","cellHeight","wallAngles","row","xCanvas","yCanvas","topY","bottomY","distToTopWall","distToBottomWall","minDistToWall","boundaryThickness","interiorCount","boundaryCount","initializeFlow","isInside","isBoundary","P_inlet","V_inlet","T_inlet","rho_inlet","progress","prevVelocityX","prevVelocityY","prevPressure","initializePreviousArrays","storePreviousIteration","velocityX","velocityY","pressure","calculateResiduals","density","velResidual","pressResidual","massResidual","count","dvx","dvy","dp","rho","rho_left","rho_right","rho_up","rho_down","vx_left","vx_right","vy_up","vy_down","drhoDx","drhoDy","massRes","updateConvergenceHistory","residuals","history","convergenceHistory","updateFlowStabilized","simulation","timeEffect","getLatestResiduals","setupCanvas","canvas","colorbarCanvas","convergenceCanvas","ctx","createNozzleGeometry","resolution","y","visualizeFlow","callbacks","i","temperature","visualizationMode","dataArray","_","vx","vy","flatData","val","minVal","maxVal","avgVal","a","updateStatsDisplay","value","color","getColorFromValue","createColorbar","minElement","avgElement","maxElement","mode","normalized","r","g","b","colorbarCtx","height","width","gradient","steps","ratio","maxLabel","midLabel","minLabel","titleLabel","titles","drawConvergenceChart","allValues","logMin","logMax","logRange","drawChartGrid","drawConvergenceLines","power","stepSize","dataset","logValue","updateSimulationStatus","status","statusElement","indicatorElement","startBtn","pauseBtn","config","updateConvergenceDisplay","timeStepElement","totalIterationsElement","velocityResidualElement","pressureResidualElement","massResidualElement","getCallbacks","updateTolerances","velToleranceInput","pressToleranceInput","massToleranceInput","setConvergenceTolerance","setupToleranceControls","id","input","startAnimationLoop","animate","shouldContinue","error","animationId","getAnimationId","setAnimationId","renderFinalState","renderCurrentFrame","newAnimationId","stopAnimationLoop","controlHandlers","setupControlButtons","simulationControl","resetBtn","setupVisualizationModeControls","radio","e","getSimulationData","initializeUI","_animationId","convergenceTolerances","initFEA","inputSimulationData","initializeSimulation","createSimulationControl","setupCanvasDimensions","initializeFlowArrays","createTestData","renderCurrentState","startSimulation","pauseSimulation","resetSimulation","type","setTolerance","newCallbacks","setCallbacks","updateVisualization","cleanupSimulation","FEA","convergenceCanvasRef","useRef","canvasRef","colorbarRef","simulationStatus","setSimulationStatus","useState","isRunning","setIsRunning","setVisualizationMode","stats","setStats","convergenceData","setConvergenceData","simulationControlRef","isInitialized","setIsInitialized","canvasDimensions","setCanvasDimensions","getStatusClass","updateCanvasSize","useCallback","container","containerWidth","maxWidth","maxHeight","useEffect","handleStart","handlePause","handleReset","handleToleranceChange","timeoutId","handleVisualizationModeChange","jsxs","Fragment","jsx","Banner"],"mappings":"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"}